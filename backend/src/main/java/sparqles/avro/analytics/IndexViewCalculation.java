/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package sparqles.avro.analytics;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class IndexViewCalculation extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ =
            new org.apache.avro.Schema.Parser()
                    .parse(
                            "{\"type\":\"record\",\"name\":\"IndexViewCalculation\",\"namespace\":\"sparqles.avro.analytics\",\"fields\":[{\"name\":\"coherences\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"IndexViewCalculationData\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"IndexViewCalculationDataValues\",\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"}]}}}]}}},{\"name\":\"rss\",\"type\":{\"type\":\"array\",\"items\":\"IndexViewCalculationData\"}},{\"name\":\"VoID\",\"type\":\"double\"},{\"name\":\"VoIDPart\",\"type\":\"double\"},{\"name\":\"SD\",\"type\":\"double\"},{\"name\":\"SDPart\",\"type\":\"double\"},{\"name\":\"Coherence\",\"type\":\"double\"},{\"name\":\"RS\",\"type\":\"double\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    @Deprecated public java.util.List<sparqles.avro.analytics.IndexViewCalculationData> coherences;
    @Deprecated public java.util.List<sparqles.avro.analytics.IndexViewCalculationData> rss;
    @Deprecated public double VoID;
    @Deprecated public double VoIDPart;
    @Deprecated public double SD;
    @Deprecated public double SDPart;
    @Deprecated public double Coherence;
    @Deprecated public double RS;

    /**
     * Default constructor. Note that this does not initialize fields to their default values from
     * the schema. If that is desired then one should use {@link \#newBuilder()}.
     */
    public IndexViewCalculation() {}

    /** All-args constructor. */
    public IndexViewCalculation(
            java.util.List<sparqles.avro.analytics.IndexViewCalculationData> coherences,
            java.util.List<sparqles.avro.analytics.IndexViewCalculationData> rss,
            java.lang.Double VoID,
            java.lang.Double VoIDPart,
            java.lang.Double SD,
            java.lang.Double SDPart,
            java.lang.Double Coherence,
            java.lang.Double RS) {
        this.coherences = coherences;
        this.rss = rss;
        this.VoID = VoID;
        this.VoIDPart = VoIDPart;
        this.SD = SD;
        this.SDPart = SDPart;
        this.Coherence = Coherence;
        this.RS = RS;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return coherences;
            case 1:
                return rss;
            case 2:
                return VoID;
            case 3:
                return VoIDPart;
            case 4:
                return SD;
            case 5:
                return SDPart;
            case 6:
                return Coherence;
            case 7:
                return RS;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                coherences =
                        (java.util.List<sparqles.avro.analytics.IndexViewCalculationData>) value$;
                break;
            case 1:
                rss = (java.util.List<sparqles.avro.analytics.IndexViewCalculationData>) value$;
                break;
            case 2:
                VoID = (java.lang.Double) value$;
                break;
            case 3:
                VoIDPart = (java.lang.Double) value$;
                break;
            case 4:
                SD = (java.lang.Double) value$;
                break;
            case 5:
                SDPart = (java.lang.Double) value$;
                break;
            case 6:
                Coherence = (java.lang.Double) value$;
                break;
            case 7:
                RS = (java.lang.Double) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /** Gets the value of the 'coherences' field. */
    public java.util.List<sparqles.avro.analytics.IndexViewCalculationData> getCoherences() {
        return coherences;
    }

    /**
     * Sets the value of the 'coherences' field.
     *
     * @param value the value to set.
     */
    public void setCoherences(
            java.util.List<sparqles.avro.analytics.IndexViewCalculationData> value) {
        this.coherences = value;
    }

    /** Gets the value of the 'rss' field. */
    public java.util.List<sparqles.avro.analytics.IndexViewCalculationData> getRss() {
        return rss;
    }

    /**
     * Sets the value of the 'rss' field.
     *
     * @param value the value to set.
     */
    public void setRss(java.util.List<sparqles.avro.analytics.IndexViewCalculationData> value) {
        this.rss = value;
    }

    /** Gets the value of the 'VoID' field. */
    public java.lang.Double getVoID() {
        return VoID;
    }

    /**
     * Sets the value of the 'VoID' field.
     *
     * @param value the value to set.
     */
    public void setVoID(java.lang.Double value) {
        this.VoID = value;
    }

    /** Gets the value of the 'VoIDPart' field. */
    public java.lang.Double getVoIDPart() {
        return VoIDPart;
    }

    /**
     * Sets the value of the 'VoIDPart' field.
     *
     * @param value the value to set.
     */
    public void setVoIDPart(java.lang.Double value) {
        this.VoIDPart = value;
    }

    /** Gets the value of the 'SD' field. */
    public java.lang.Double getSD() {
        return SD;
    }

    /**
     * Sets the value of the 'SD' field.
     *
     * @param value the value to set.
     */
    public void setSD(java.lang.Double value) {
        this.SD = value;
    }

    /** Gets the value of the 'SDPart' field. */
    public java.lang.Double getSDPart() {
        return SDPart;
    }

    /**
     * Sets the value of the 'SDPart' field.
     *
     * @param value the value to set.
     */
    public void setSDPart(java.lang.Double value) {
        this.SDPart = value;
    }

    /** Gets the value of the 'Coherence' field. */
    public java.lang.Double getCoherence() {
        return Coherence;
    }

    /**
     * Sets the value of the 'Coherence' field.
     *
     * @param value the value to set.
     */
    public void setCoherence(java.lang.Double value) {
        this.Coherence = value;
    }

    /** Gets the value of the 'RS' field. */
    public java.lang.Double getRS() {
        return RS;
    }

    /**
     * Sets the value of the 'RS' field.
     *
     * @param value the value to set.
     */
    public void setRS(java.lang.Double value) {
        this.RS = value;
    }

    /** Creates a new IndexViewCalculation RecordBuilder */
    public static sparqles.avro.analytics.IndexViewCalculation.Builder newBuilder() {
        return new sparqles.avro.analytics.IndexViewCalculation.Builder();
    }

    /** Creates a new IndexViewCalculation RecordBuilder by copying an existing Builder */
    public static sparqles.avro.analytics.IndexViewCalculation.Builder newBuilder(
            sparqles.avro.analytics.IndexViewCalculation.Builder other) {
        return new sparqles.avro.analytics.IndexViewCalculation.Builder(other);
    }

    /**
     * Creates a new IndexViewCalculation RecordBuilder by copying an existing IndexViewCalculation
     * instance
     */
    public static sparqles.avro.analytics.IndexViewCalculation.Builder newBuilder(
            sparqles.avro.analytics.IndexViewCalculation other) {
        return new sparqles.avro.analytics.IndexViewCalculation.Builder(other);
    }

    /** RecordBuilder for IndexViewCalculation instances. */
    public static class Builder
            extends org.apache.avro.specific.SpecificRecordBuilderBase<IndexViewCalculation>
            implements org.apache.avro.data.RecordBuilder<IndexViewCalculation> {

        private java.util.List<sparqles.avro.analytics.IndexViewCalculationData> coherences;
        private java.util.List<sparqles.avro.analytics.IndexViewCalculationData> rss;
        private double VoID;
        private double VoIDPart;
        private double SD;
        private double SDPart;
        private double Coherence;
        private double RS;

        /** Creates a new Builder */
        private Builder() {
            super(sparqles.avro.analytics.IndexViewCalculation.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(sparqles.avro.analytics.IndexViewCalculation.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.coherences)) {
                this.coherences = data().deepCopy(fields()[0].schema(), other.coherences);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.rss)) {
                this.rss = data().deepCopy(fields()[1].schema(), other.rss);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.VoID)) {
                this.VoID = data().deepCopy(fields()[2].schema(), other.VoID);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.VoIDPart)) {
                this.VoIDPart = data().deepCopy(fields()[3].schema(), other.VoIDPart);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.SD)) {
                this.SD = data().deepCopy(fields()[4].schema(), other.SD);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.SDPart)) {
                this.SDPart = data().deepCopy(fields()[5].schema(), other.SDPart);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.Coherence)) {
                this.Coherence = data().deepCopy(fields()[6].schema(), other.Coherence);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.RS)) {
                this.RS = data().deepCopy(fields()[7].schema(), other.RS);
                fieldSetFlags()[7] = true;
            }
        }

        /** Creates a Builder by copying an existing IndexViewCalculation instance */
        private Builder(sparqles.avro.analytics.IndexViewCalculation other) {
            super(sparqles.avro.analytics.IndexViewCalculation.SCHEMA$);
            if (isValidValue(fields()[0], other.coherences)) {
                this.coherences = data().deepCopy(fields()[0].schema(), other.coherences);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.rss)) {
                this.rss = data().deepCopy(fields()[1].schema(), other.rss);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.VoID)) {
                this.VoID = data().deepCopy(fields()[2].schema(), other.VoID);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.VoIDPart)) {
                this.VoIDPart = data().deepCopy(fields()[3].schema(), other.VoIDPart);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.SD)) {
                this.SD = data().deepCopy(fields()[4].schema(), other.SD);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.SDPart)) {
                this.SDPart = data().deepCopy(fields()[5].schema(), other.SDPart);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.Coherence)) {
                this.Coherence = data().deepCopy(fields()[6].schema(), other.Coherence);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.RS)) {
                this.RS = data().deepCopy(fields()[7].schema(), other.RS);
                fieldSetFlags()[7] = true;
            }
        }

        /** Gets the value of the 'coherences' field */
        public java.util.List<sparqles.avro.analytics.IndexViewCalculationData> getCoherences() {
            return coherences;
        }

        /** Sets the value of the 'coherences' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder setCoherences(
                java.util.List<sparqles.avro.analytics.IndexViewCalculationData> value) {
            validate(fields()[0], value);
            this.coherences = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'coherences' field has been set */
        public boolean hasCoherences() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'coherences' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder clearCoherences() {
            coherences = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'rss' field */
        public java.util.List<sparqles.avro.analytics.IndexViewCalculationData> getRss() {
            return rss;
        }

        /** Sets the value of the 'rss' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder setRss(
                java.util.List<sparqles.avro.analytics.IndexViewCalculationData> value) {
            validate(fields()[1], value);
            this.rss = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'rss' field has been set */
        public boolean hasRss() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'rss' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder clearRss() {
            rss = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /** Gets the value of the 'VoID' field */
        public java.lang.Double getVoID() {
            return VoID;
        }

        /** Sets the value of the 'VoID' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder setVoID(double value) {
            validate(fields()[2], value);
            this.VoID = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /** Checks whether the 'VoID' field has been set */
        public boolean hasVoID() {
            return fieldSetFlags()[2];
        }

        /** Clears the value of the 'VoID' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder clearVoID() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /** Gets the value of the 'VoIDPart' field */
        public java.lang.Double getVoIDPart() {
            return VoIDPart;
        }

        /** Sets the value of the 'VoIDPart' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder setVoIDPart(double value) {
            validate(fields()[3], value);
            this.VoIDPart = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /** Checks whether the 'VoIDPart' field has been set */
        public boolean hasVoIDPart() {
            return fieldSetFlags()[3];
        }

        /** Clears the value of the 'VoIDPart' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder clearVoIDPart() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /** Gets the value of the 'SD' field */
        public java.lang.Double getSD() {
            return SD;
        }

        /** Sets the value of the 'SD' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder setSD(double value) {
            validate(fields()[4], value);
            this.SD = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /** Checks whether the 'SD' field has been set */
        public boolean hasSD() {
            return fieldSetFlags()[4];
        }

        /** Clears the value of the 'SD' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder clearSD() {
            fieldSetFlags()[4] = false;
            return this;
        }

        /** Gets the value of the 'SDPart' field */
        public java.lang.Double getSDPart() {
            return SDPart;
        }

        /** Sets the value of the 'SDPart' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder setSDPart(double value) {
            validate(fields()[5], value);
            this.SDPart = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /** Checks whether the 'SDPart' field has been set */
        public boolean hasSDPart() {
            return fieldSetFlags()[5];
        }

        /** Clears the value of the 'SDPart' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder clearSDPart() {
            fieldSetFlags()[5] = false;
            return this;
        }

        /** Gets the value of the 'Coherence' field */
        public java.lang.Double getCoherence() {
            return Coherence;
        }

        /** Sets the value of the 'Coherence' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder setCoherence(double value) {
            validate(fields()[6], value);
            this.Coherence = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /** Checks whether the 'Coherence' field has been set */
        public boolean hasCoherence() {
            return fieldSetFlags()[6];
        }

        /** Clears the value of the 'Coherence' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder clearCoherence() {
            fieldSetFlags()[6] = false;
            return this;
        }

        /** Gets the value of the 'RS' field */
        public java.lang.Double getRS() {
            return RS;
        }

        /** Sets the value of the 'RS' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder setRS(double value) {
            validate(fields()[7], value);
            this.RS = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /** Checks whether the 'RS' field has been set */
        public boolean hasRS() {
            return fieldSetFlags()[7];
        }

        /** Clears the value of the 'RS' field */
        public sparqles.avro.analytics.IndexViewCalculation.Builder clearRS() {
            fieldSetFlags()[7] = false;
            return this;
        }

        @Override
        public IndexViewCalculation build() {
            try {
                IndexViewCalculation record = new IndexViewCalculation();
                record.coherences =
                        fieldSetFlags()[0]
                                ? this.coherences
                                : (java.util.List<sparqles.avro.analytics.IndexViewCalculationData>)
                                        defaultValue(fields()[0]);
                record.rss =
                        fieldSetFlags()[1]
                                ? this.rss
                                : (java.util.List<sparqles.avro.analytics.IndexViewCalculationData>)
                                        defaultValue(fields()[1]);
                record.VoID =
                        fieldSetFlags()[2]
                                ? this.VoID
                                : (java.lang.Double) defaultValue(fields()[2]);
                record.VoIDPart =
                        fieldSetFlags()[3]
                                ? this.VoIDPart
                                : (java.lang.Double) defaultValue(fields()[3]);
                record.SD =
                        fieldSetFlags()[4] ? this.SD : (java.lang.Double) defaultValue(fields()[4]);
                record.SDPart =
                        fieldSetFlags()[5]
                                ? this.SDPart
                                : (java.lang.Double) defaultValue(fields()[5]);
                record.Coherence =
                        fieldSetFlags()[6]
                                ? this.Coherence
                                : (java.lang.Double) defaultValue(fields()[6]);
                record.RS =
                        fieldSetFlags()[7] ? this.RS : (java.lang.Double) defaultValue(fields()[7]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
