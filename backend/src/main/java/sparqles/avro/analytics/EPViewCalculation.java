/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package sparqles.avro.analytics;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class EPViewCalculation extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -6130252355681190278L;

    public static final org.apache.avro.Schema SCHEMA$ =
            new org.apache.avro.Schema.Parser()
                    .parse(
                            "{\"type\":\"record\",\"name\":\"EPViewCalculation\",\"namespace\":\"sparqles.avro.analytics\",\"fields\":[{\"name\":\"triples\",\"type\":\"long\"},{\"name\":\"entities\",\"type\":\"long\"},{\"name\":\"classes\",\"type\":\"long\"},{\"name\":\"properties\",\"type\":\"long\"},{\"name\":\"distinctSubjects\",\"type\":\"long\"},{\"name\":\"distinctObjects\",\"type\":\"long\"},{\"name\":\"exampleResources\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"VoID\",\"type\":\"string\"},{\"name\":\"VoIDPart\",\"type\":\"boolean\"},{\"name\":\"SD\",\"type\":\"string\"},{\"name\":\"SDPart\",\"type\":\"boolean\"},{\"name\":\"coherence\",\"type\":\"double\"},{\"name\":\"RS\",\"type\":\"double\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<EPViewCalculation> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<EPViewCalculation> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<EPViewCalculation> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<EPViewCalculation> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link
     * SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<EPViewCalculation> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this EPViewCalculation to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a EPViewCalculation from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a EPViewCalculation instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of
     *     this class
     */
    public static EPViewCalculation fromByteBuffer(java.nio.ByteBuffer b)
            throws java.io.IOException {
        return DECODER.decode(b);
    }

    private long triples;
    private long entities;
    private long classes;
    private long properties;
    private long distinctSubjects;
    private long distinctObjects;
    private java.util.List<java.lang.CharSequence> exampleResources;
    private java.lang.CharSequence VoID;
    private boolean VoIDPart;
    private java.lang.CharSequence SD;
    private boolean SDPart;
    private double coherence;
    private double RS;

    /**
     * Default constructor. Note that this does not initialize fields to their default values from
     * the schema. If that is desired then one should use <code>newBuilder()</code>.
     */
    public EPViewCalculation() {}

    /**
     * All-args constructor.
     *
     * @param triples The new value for triples
     * @param entities The new value for entities
     * @param classes The new value for classes
     * @param properties The new value for properties
     * @param distinctSubjects The new value for distinctSubjects
     * @param distinctObjects The new value for distinctObjects
     * @param exampleResources The new value for exampleResources
     * @param VoID The new value for VoID
     * @param VoIDPart The new value for VoIDPart
     * @param SD The new value for SD
     * @param SDPart The new value for SDPart
     * @param coherence The new value for coherence
     * @param RS The new value for RS
     */
    public EPViewCalculation(
            java.lang.Long triples,
            java.lang.Long entities,
            java.lang.Long classes,
            java.lang.Long properties,
            java.lang.Long distinctSubjects,
            java.lang.Long distinctObjects,
            java.util.List<java.lang.CharSequence> exampleResources,
            java.lang.CharSequence VoID,
            java.lang.Boolean VoIDPart,
            java.lang.CharSequence SD,
            java.lang.Boolean SDPart,
            java.lang.Double coherence,
            java.lang.Double RS) {
        this.triples = triples;
        this.entities = entities;
        this.classes = classes;
        this.properties = properties;
        this.distinctSubjects = distinctSubjects;
        this.distinctObjects = distinctObjects;
        this.exampleResources = exampleResources;
        this.VoID = VoID;
        this.VoIDPart = VoIDPart;
        this.SD = SD;
        this.SDPart = SDPart;
        this.coherence = coherence;
        this.RS = RS;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return triples;
            case 1:
                return entities;
            case 2:
                return classes;
            case 3:
                return properties;
            case 4:
                return distinctSubjects;
            case 5:
                return distinctObjects;
            case 6:
                return exampleResources;
            case 7:
                return VoID;
            case 8:
                return VoIDPart;
            case 9:
                return SD;
            case 10:
                return SDPart;
            case 11:
                return coherence;
            case 12:
                return RS;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                triples = (java.lang.Long) value$;
                break;
            case 1:
                entities = (java.lang.Long) value$;
                break;
            case 2:
                classes = (java.lang.Long) value$;
                break;
            case 3:
                properties = (java.lang.Long) value$;
                break;
            case 4:
                distinctSubjects = (java.lang.Long) value$;
                break;
            case 5:
                distinctObjects = (java.lang.Long) value$;
                break;
            case 6:
                exampleResources = (java.util.List<java.lang.CharSequence>) value$;
                break;
            case 7:
                VoID = (java.lang.CharSequence) value$;
                break;
            case 8:
                VoIDPart = (java.lang.Boolean) value$;
                break;
            case 9:
                SD = (java.lang.CharSequence) value$;
                break;
            case 10:
                SDPart = (java.lang.Boolean) value$;
                break;
            case 11:
                coherence = (java.lang.Double) value$;
                break;
            case 12:
                RS = (java.lang.Double) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'triples' field.
     *
     * @return The value of the 'triples' field.
     */
    public long getTriples() {
        return triples;
    }

    /**
     * Sets the value of the 'triples' field.
     *
     * @param value the value to set.
     */
    public void setTriples(long value) {
        this.triples = value;
    }

    /**
     * Gets the value of the 'entities' field.
     *
     * @return The value of the 'entities' field.
     */
    public long getEntities() {
        return entities;
    }

    /**
     * Sets the value of the 'entities' field.
     *
     * @param value the value to set.
     */
    public void setEntities(long value) {
        this.entities = value;
    }

    /**
     * Gets the value of the 'classes' field.
     *
     * @return The value of the 'classes' field.
     */
    public long getClasses() {
        return classes;
    }

    /**
     * Sets the value of the 'classes' field.
     *
     * @param value the value to set.
     */
    public void setClasses(long value) {
        this.classes = value;
    }

    /**
     * Gets the value of the 'properties' field.
     *
     * @return The value of the 'properties' field.
     */
    public long getProperties() {
        return properties;
    }

    /**
     * Sets the value of the 'properties' field.
     *
     * @param value the value to set.
     */
    public void setProperties(long value) {
        this.properties = value;
    }

    /**
     * Gets the value of the 'distinctSubjects' field.
     *
     * @return The value of the 'distinctSubjects' field.
     */
    public long getDistinctSubjects() {
        return distinctSubjects;
    }

    /**
     * Sets the value of the 'distinctSubjects' field.
     *
     * @param value the value to set.
     */
    public void setDistinctSubjects(long value) {
        this.distinctSubjects = value;
    }

    /**
     * Gets the value of the 'distinctObjects' field.
     *
     * @return The value of the 'distinctObjects' field.
     */
    public long getDistinctObjects() {
        return distinctObjects;
    }

    /**
     * Sets the value of the 'distinctObjects' field.
     *
     * @param value the value to set.
     */
    public void setDistinctObjects(long value) {
        this.distinctObjects = value;
    }

    /**
     * Gets the value of the 'exampleResources' field.
     *
     * @return The value of the 'exampleResources' field.
     */
    public java.util.List<java.lang.CharSequence> getExampleResources() {
        return exampleResources;
    }

    /**
     * Sets the value of the 'exampleResources' field.
     *
     * @param value the value to set.
     */
    public void setExampleResources(java.util.List<java.lang.CharSequence> value) {
        this.exampleResources = value;
    }

    /**
     * Gets the value of the 'VoID' field.
     *
     * @return The value of the 'VoID' field.
     */
    public java.lang.CharSequence getVoID() {
        return VoID;
    }

    /**
     * Sets the value of the 'VoID' field.
     *
     * @param value the value to set.
     */
    public void setVoID(java.lang.CharSequence value) {
        this.VoID = value;
    }

    /**
     * Gets the value of the 'VoIDPart' field.
     *
     * @return The value of the 'VoIDPart' field.
     */
    public boolean getVoIDPart() {
        return VoIDPart;
    }

    /**
     * Sets the value of the 'VoIDPart' field.
     *
     * @param value the value to set.
     */
    public void setVoIDPart(boolean value) {
        this.VoIDPart = value;
    }

    /**
     * Gets the value of the 'SD' field.
     *
     * @return The value of the 'SD' field.
     */
    public java.lang.CharSequence getSD() {
        return SD;
    }

    /**
     * Sets the value of the 'SD' field.
     *
     * @param value the value to set.
     */
    public void setSD(java.lang.CharSequence value) {
        this.SD = value;
    }

    /**
     * Gets the value of the 'SDPart' field.
     *
     * @return The value of the 'SDPart' field.
     */
    public boolean getSDPart() {
        return SDPart;
    }

    /**
     * Sets the value of the 'SDPart' field.
     *
     * @param value the value to set.
     */
    public void setSDPart(boolean value) {
        this.SDPart = value;
    }

    /**
     * Gets the value of the 'coherence' field.
     *
     * @return The value of the 'coherence' field.
     */
    public double getCoherence() {
        return coherence;
    }

    /**
     * Sets the value of the 'coherence' field.
     *
     * @param value the value to set.
     */
    public void setCoherence(double value) {
        this.coherence = value;
    }

    /**
     * Gets the value of the 'RS' field.
     *
     * @return The value of the 'RS' field.
     */
    public double getRS() {
        return RS;
    }

    /**
     * Sets the value of the 'RS' field.
     *
     * @param value the value to set.
     */
    public void setRS(double value) {
        this.RS = value;
    }

    /**
     * Creates a new EPViewCalculation RecordBuilder.
     *
     * @return A new EPViewCalculation RecordBuilder
     */
    public static sparqles.avro.analytics.EPViewCalculation.Builder newBuilder() {
        return new sparqles.avro.analytics.EPViewCalculation.Builder();
    }

    /**
     * Creates a new EPViewCalculation RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new EPViewCalculation RecordBuilder
     */
    public static sparqles.avro.analytics.EPViewCalculation.Builder newBuilder(
            sparqles.avro.analytics.EPViewCalculation.Builder other) {
        if (other == null) {
            return new sparqles.avro.analytics.EPViewCalculation.Builder();
        } else {
            return new sparqles.avro.analytics.EPViewCalculation.Builder(other);
        }
    }

    /**
     * Creates a new EPViewCalculation RecordBuilder by copying an existing EPViewCalculation
     * instance.
     *
     * @param other The existing instance to copy.
     * @return A new EPViewCalculation RecordBuilder
     */
    public static sparqles.avro.analytics.EPViewCalculation.Builder newBuilder(
            sparqles.avro.analytics.EPViewCalculation other) {
        if (other == null) {
            return new sparqles.avro.analytics.EPViewCalculation.Builder();
        } else {
            return new sparqles.avro.analytics.EPViewCalculation.Builder(other);
        }
    }

    /** RecordBuilder for EPViewCalculation instances. */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder
            extends org.apache.avro.specific.SpecificRecordBuilderBase<EPViewCalculation>
            implements org.apache.avro.data.RecordBuilder<EPViewCalculation> {

        private long triples;
        private long entities;
        private long classes;
        private long properties;
        private long distinctSubjects;
        private long distinctObjects;
        private java.util.List<java.lang.CharSequence> exampleResources;
        private java.lang.CharSequence VoID;
        private boolean VoIDPart;
        private java.lang.CharSequence SD;
        private boolean SDPart;
        private double coherence;
        private double RS;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(sparqles.avro.analytics.EPViewCalculation.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.triples)) {
                this.triples = data().deepCopy(fields()[0].schema(), other.triples);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (isValidValue(fields()[1], other.entities)) {
                this.entities = data().deepCopy(fields()[1].schema(), other.entities);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (isValidValue(fields()[2], other.classes)) {
                this.classes = data().deepCopy(fields()[2].schema(), other.classes);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.properties)) {
                this.properties = data().deepCopy(fields()[3].schema(), other.properties);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (isValidValue(fields()[4], other.distinctSubjects)) {
                this.distinctSubjects =
                        data().deepCopy(fields()[4].schema(), other.distinctSubjects);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (isValidValue(fields()[5], other.distinctObjects)) {
                this.distinctObjects = data().deepCopy(fields()[5].schema(), other.distinctObjects);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (isValidValue(fields()[6], other.exampleResources)) {
                this.exampleResources =
                        data().deepCopy(fields()[6].schema(), other.exampleResources);
                fieldSetFlags()[6] = other.fieldSetFlags()[6];
            }
            if (isValidValue(fields()[7], other.VoID)) {
                this.VoID = data().deepCopy(fields()[7].schema(), other.VoID);
                fieldSetFlags()[7] = other.fieldSetFlags()[7];
            }
            if (isValidValue(fields()[8], other.VoIDPart)) {
                this.VoIDPart = data().deepCopy(fields()[8].schema(), other.VoIDPart);
                fieldSetFlags()[8] = other.fieldSetFlags()[8];
            }
            if (isValidValue(fields()[9], other.SD)) {
                this.SD = data().deepCopy(fields()[9].schema(), other.SD);
                fieldSetFlags()[9] = other.fieldSetFlags()[9];
            }
            if (isValidValue(fields()[10], other.SDPart)) {
                this.SDPart = data().deepCopy(fields()[10].schema(), other.SDPart);
                fieldSetFlags()[10] = other.fieldSetFlags()[10];
            }
            if (isValidValue(fields()[11], other.coherence)) {
                this.coherence = data().deepCopy(fields()[11].schema(), other.coherence);
                fieldSetFlags()[11] = other.fieldSetFlags()[11];
            }
            if (isValidValue(fields()[12], other.RS)) {
                this.RS = data().deepCopy(fields()[12].schema(), other.RS);
                fieldSetFlags()[12] = other.fieldSetFlags()[12];
            }
        }

        /**
         * Creates a Builder by copying an existing EPViewCalculation instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(sparqles.avro.analytics.EPViewCalculation other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.triples)) {
                this.triples = data().deepCopy(fields()[0].schema(), other.triples);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.entities)) {
                this.entities = data().deepCopy(fields()[1].schema(), other.entities);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.classes)) {
                this.classes = data().deepCopy(fields()[2].schema(), other.classes);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.properties)) {
                this.properties = data().deepCopy(fields()[3].schema(), other.properties);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.distinctSubjects)) {
                this.distinctSubjects =
                        data().deepCopy(fields()[4].schema(), other.distinctSubjects);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.distinctObjects)) {
                this.distinctObjects = data().deepCopy(fields()[5].schema(), other.distinctObjects);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.exampleResources)) {
                this.exampleResources =
                        data().deepCopy(fields()[6].schema(), other.exampleResources);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.VoID)) {
                this.VoID = data().deepCopy(fields()[7].schema(), other.VoID);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.VoIDPart)) {
                this.VoIDPart = data().deepCopy(fields()[8].schema(), other.VoIDPart);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.SD)) {
                this.SD = data().deepCopy(fields()[9].schema(), other.SD);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.SDPart)) {
                this.SDPart = data().deepCopy(fields()[10].schema(), other.SDPart);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.coherence)) {
                this.coherence = data().deepCopy(fields()[11].schema(), other.coherence);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.RS)) {
                this.RS = data().deepCopy(fields()[12].schema(), other.RS);
                fieldSetFlags()[12] = true;
            }
        }

        /**
         * Gets the value of the 'triples' field.
         *
         * @return The value.
         */
        public long getTriples() {
            return triples;
        }

        /**
         * Sets the value of the 'triples' field.
         *
         * @param value The value of 'triples'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder setTriples(long value) {
            validate(fields()[0], value);
            this.triples = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'triples' field has been set.
         *
         * @return True if the 'triples' field has been set, false otherwise.
         */
        public boolean hasTriples() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'triples' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearTriples() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'entities' field.
         *
         * @return The value.
         */
        public long getEntities() {
            return entities;
        }

        /**
         * Sets the value of the 'entities' field.
         *
         * @param value The value of 'entities'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder setEntities(long value) {
            validate(fields()[1], value);
            this.entities = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'entities' field has been set.
         *
         * @return True if the 'entities' field has been set, false otherwise.
         */
        public boolean hasEntities() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'entities' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearEntities() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'classes' field.
         *
         * @return The value.
         */
        public long getClasses() {
            return classes;
        }

        /**
         * Sets the value of the 'classes' field.
         *
         * @param value The value of 'classes'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder setClasses(long value) {
            validate(fields()[2], value);
            this.classes = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'classes' field has been set.
         *
         * @return True if the 'classes' field has been set, false otherwise.
         */
        public boolean hasClasses() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'classes' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearClasses() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'properties' field.
         *
         * @return The value.
         */
        public long getProperties() {
            return properties;
        }

        /**
         * Sets the value of the 'properties' field.
         *
         * @param value The value of 'properties'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder setProperties(long value) {
            validate(fields()[3], value);
            this.properties = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'properties' field has been set.
         *
         * @return True if the 'properties' field has been set, false otherwise.
         */
        public boolean hasProperties() {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'properties' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearProperties() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'distinctSubjects' field.
         *
         * @return The value.
         */
        public long getDistinctSubjects() {
            return distinctSubjects;
        }

        /**
         * Sets the value of the 'distinctSubjects' field.
         *
         * @param value The value of 'distinctSubjects'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder setDistinctSubjects(long value) {
            validate(fields()[4], value);
            this.distinctSubjects = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'distinctSubjects' field has been set.
         *
         * @return True if the 'distinctSubjects' field has been set, false otherwise.
         */
        public boolean hasDistinctSubjects() {
            return fieldSetFlags()[4];
        }

        /**
         * Clears the value of the 'distinctSubjects' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearDistinctSubjects() {
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'distinctObjects' field.
         *
         * @return The value.
         */
        public long getDistinctObjects() {
            return distinctObjects;
        }

        /**
         * Sets the value of the 'distinctObjects' field.
         *
         * @param value The value of 'distinctObjects'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder setDistinctObjects(long value) {
            validate(fields()[5], value);
            this.distinctObjects = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'distinctObjects' field has been set.
         *
         * @return True if the 'distinctObjects' field has been set, false otherwise.
         */
        public boolean hasDistinctObjects() {
            return fieldSetFlags()[5];
        }

        /**
         * Clears the value of the 'distinctObjects' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearDistinctObjects() {
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'exampleResources' field.
         *
         * @return The value.
         */
        public java.util.List<java.lang.CharSequence> getExampleResources() {
            return exampleResources;
        }

        /**
         * Sets the value of the 'exampleResources' field.
         *
         * @param value The value of 'exampleResources'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder setExampleResources(
                java.util.List<java.lang.CharSequence> value) {
            validate(fields()[6], value);
            this.exampleResources = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'exampleResources' field has been set.
         *
         * @return True if the 'exampleResources' field has been set, false otherwise.
         */
        public boolean hasExampleResources() {
            return fieldSetFlags()[6];
        }

        /**
         * Clears the value of the 'exampleResources' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearExampleResources() {
            exampleResources = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'VoID' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getVoID() {
            return VoID;
        }

        /**
         * Sets the value of the 'VoID' field.
         *
         * @param value The value of 'VoID'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder setVoID(
                java.lang.CharSequence value) {
            validate(fields()[7], value);
            this.VoID = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'VoID' field has been set.
         *
         * @return True if the 'VoID' field has been set, false otherwise.
         */
        public boolean hasVoID() {
            return fieldSetFlags()[7];
        }

        /**
         * Clears the value of the 'VoID' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearVoID() {
            VoID = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'VoIDPart' field.
         *
         * @return The value.
         */
        public boolean getVoIDPart() {
            return VoIDPart;
        }

        /**
         * Sets the value of the 'VoIDPart' field.
         *
         * @param value The value of 'VoIDPart'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder setVoIDPart(boolean value) {
            validate(fields()[8], value);
            this.VoIDPart = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'VoIDPart' field has been set.
         *
         * @return True if the 'VoIDPart' field has been set, false otherwise.
         */
        public boolean hasVoIDPart() {
            return fieldSetFlags()[8];
        }

        /**
         * Clears the value of the 'VoIDPart' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearVoIDPart() {
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'SD' field.
         *
         * @return The value.
         */
        public java.lang.CharSequence getSD() {
            return SD;
        }

        /**
         * Sets the value of the 'SD' field.
         *
         * @param value The value of 'SD'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder setSD(
                java.lang.CharSequence value) {
            validate(fields()[9], value);
            this.SD = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'SD' field has been set.
         *
         * @return True if the 'SD' field has been set, false otherwise.
         */
        public boolean hasSD() {
            return fieldSetFlags()[9];
        }

        /**
         * Clears the value of the 'SD' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearSD() {
            SD = null;
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'SDPart' field.
         *
         * @return The value.
         */
        public boolean getSDPart() {
            return SDPart;
        }

        /**
         * Sets the value of the 'SDPart' field.
         *
         * @param value The value of 'SDPart'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder setSDPart(boolean value) {
            validate(fields()[10], value);
            this.SDPart = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'SDPart' field has been set.
         *
         * @return True if the 'SDPart' field has been set, false otherwise.
         */
        public boolean hasSDPart() {
            return fieldSetFlags()[10];
        }

        /**
         * Clears the value of the 'SDPart' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearSDPart() {
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'coherence' field.
         *
         * @return The value.
         */
        public double getCoherence() {
            return coherence;
        }

        /**
         * Sets the value of the 'coherence' field.
         *
         * @param value The value of 'coherence'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder setCoherence(double value) {
            validate(fields()[11], value);
            this.coherence = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'coherence' field has been set.
         *
         * @return True if the 'coherence' field has been set, false otherwise.
         */
        public boolean hasCoherence() {
            return fieldSetFlags()[11];
        }

        /**
         * Clears the value of the 'coherence' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearCoherence() {
            fieldSetFlags()[11] = false;
            return this;
        }

        /**
         * Gets the value of the 'RS' field.
         *
         * @return The value.
         */
        public double getRS() {
            return RS;
        }

        /**
         * Sets the value of the 'RS' field.
         *
         * @param value The value of 'RS'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder setRS(double value) {
            validate(fields()[12], value);
            this.RS = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /**
         * Checks whether the 'RS' field has been set.
         *
         * @return True if the 'RS' field has been set, false otherwise.
         */
        public boolean hasRS() {
            return fieldSetFlags()[12];
        }

        /**
         * Clears the value of the 'RS' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearRS() {
            fieldSetFlags()[12] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public EPViewCalculation build() {
            try {
                EPViewCalculation record = new EPViewCalculation();
                record.triples =
                        fieldSetFlags()[0]
                                ? this.triples
                                : (java.lang.Long) defaultValue(fields()[0]);
                record.entities =
                        fieldSetFlags()[1]
                                ? this.entities
                                : (java.lang.Long) defaultValue(fields()[1]);
                record.classes =
                        fieldSetFlags()[2]
                                ? this.classes
                                : (java.lang.Long) defaultValue(fields()[2]);
                record.properties =
                        fieldSetFlags()[3]
                                ? this.properties
                                : (java.lang.Long) defaultValue(fields()[3]);
                record.distinctSubjects =
                        fieldSetFlags()[4]
                                ? this.distinctSubjects
                                : (java.lang.Long) defaultValue(fields()[4]);
                record.distinctObjects =
                        fieldSetFlags()[5]
                                ? this.distinctObjects
                                : (java.lang.Long) defaultValue(fields()[5]);
                record.exampleResources =
                        fieldSetFlags()[6]
                                ? this.exampleResources
                                : (java.util.List<java.lang.CharSequence>)
                                        defaultValue(fields()[6]);
                record.VoID =
                        fieldSetFlags()[7]
                                ? this.VoID
                                : (java.lang.CharSequence) defaultValue(fields()[7]);
                record.VoIDPart =
                        fieldSetFlags()[8]
                                ? this.VoIDPart
                                : (java.lang.Boolean) defaultValue(fields()[8]);
                record.SD =
                        fieldSetFlags()[9]
                                ? this.SD
                                : (java.lang.CharSequence) defaultValue(fields()[9]);
                record.SDPart =
                        fieldSetFlags()[10]
                                ? this.SDPart
                                : (java.lang.Boolean) defaultValue(fields()[10]);
                record.coherence =
                        fieldSetFlags()[11]
                                ? this.coherence
                                : (java.lang.Double) defaultValue(fields()[11]);
                record.RS =
                        fieldSetFlags()[12]
                                ? this.RS
                                : (java.lang.Double) defaultValue(fields()[12]);
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<EPViewCalculation> WRITER$ =
            (org.apache.avro.io.DatumWriter<EPViewCalculation>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<EPViewCalculation> READER$ =
            (org.apache.avro.io.DatumReader<EPViewCalculation>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
        out.writeLong(this.triples);

        out.writeLong(this.entities);

        out.writeLong(this.classes);

        out.writeLong(this.properties);

        out.writeLong(this.distinctSubjects);

        out.writeLong(this.distinctObjects);

        long size0 = this.exampleResources.size();
        out.writeArrayStart();
        out.setItemCount(size0);
        long actualSize0 = 0;
        for (java.lang.CharSequence e0 : this.exampleResources) {
            actualSize0++;
            out.startItem();
            out.writeString(e0);
        }
        out.writeArrayEnd();
        if (actualSize0 != size0)
            throw new java.util.ConcurrentModificationException(
                    "Array-size written was "
                            + size0
                            + ", but element count was "
                            + actualSize0
                            + ".");

        out.writeString(this.VoID);

        out.writeBoolean(this.VoIDPart);

        out.writeString(this.SD);

        out.writeBoolean(this.SDPart);

        out.writeDouble(this.coherence);

        out.writeDouble(this.RS);
    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.triples = in.readLong();

            this.entities = in.readLong();

            this.classes = in.readLong();

            this.properties = in.readLong();

            this.distinctSubjects = in.readLong();

            this.distinctObjects = in.readLong();

            long size0 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a0 = this.exampleResources;
            if (a0 == null) {
                a0 =
                        new SpecificData.Array<java.lang.CharSequence>(
                                (int) size0, SCHEMA$.getField("exampleResources").schema());
                this.exampleResources = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.CharSequence> ga0 =
                    (a0 instanceof SpecificData.Array
                            ? (SpecificData.Array<java.lang.CharSequence>) a0
                            : null);
            for (; 0 < size0; size0 = in.arrayNext()) {
                for (; size0 != 0; size0--) {
                    java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
                    e0 = in.readString(e0 instanceof Utf8 ? (Utf8) e0 : null);
                    a0.add(e0);
                }
            }

            this.VoID = in.readString(this.VoID instanceof Utf8 ? (Utf8) this.VoID : null);

            this.VoIDPart = in.readBoolean();

            this.SD = in.readString(this.SD instanceof Utf8 ? (Utf8) this.SD : null);

            this.SDPart = in.readBoolean();

            this.coherence = in.readDouble();

            this.RS = in.readDouble();

        } else {
            for (int i = 0; i < 13; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.triples = in.readLong();
                        break;

                    case 1:
                        this.entities = in.readLong();
                        break;

                    case 2:
                        this.classes = in.readLong();
                        break;

                    case 3:
                        this.properties = in.readLong();
                        break;

                    case 4:
                        this.distinctSubjects = in.readLong();
                        break;

                    case 5:
                        this.distinctObjects = in.readLong();
                        break;

                    case 6:
                        long size0 = in.readArrayStart();
                        java.util.List<java.lang.CharSequence> a0 = this.exampleResources;
                        if (a0 == null) {
                            a0 =
                                    new SpecificData.Array<java.lang.CharSequence>(
                                            (int) size0,
                                            SCHEMA$.getField("exampleResources").schema());
                            this.exampleResources = a0;
                        } else a0.clear();
                        SpecificData.Array<java.lang.CharSequence> ga0 =
                                (a0 instanceof SpecificData.Array
                                        ? (SpecificData.Array<java.lang.CharSequence>) a0
                                        : null);
                        for (; 0 < size0; size0 = in.arrayNext()) {
                            for (; size0 != 0; size0--) {
                                java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
                                e0 = in.readString(e0 instanceof Utf8 ? (Utf8) e0 : null);
                                a0.add(e0);
                            }
                        }
                        break;

                    case 7:
                        this.VoID =
                                in.readString(this.VoID instanceof Utf8 ? (Utf8) this.VoID : null);
                        break;

                    case 8:
                        this.VoIDPart = in.readBoolean();
                        break;

                    case 9:
                        this.SD = in.readString(this.SD instanceof Utf8 ? (Utf8) this.SD : null);
                        break;

                    case 10:
                        this.SDPart = in.readBoolean();
                        break;

                    case 11:
                        this.coherence = in.readDouble();
                        break;

                    case 12:
                        this.RS = in.readDouble();
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}
