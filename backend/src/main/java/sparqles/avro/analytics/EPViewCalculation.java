/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package sparqles.avro.analytics;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EPViewCalculation extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ =
            new org.apache.avro.Schema.Parser()
                    .parse(
                            "{\"type\":\"record\",\"name\":\"EPViewCalculation\",\"namespace\":\"sparqles.avro.analytics\",\"fields\":[{\"name\":\"triples\",\"type\":\"long\"},{\"name\":\"entities\",\"type\":\"long\"},{\"name\":\"classes\",\"type\":\"long\"},{\"name\":\"properties\",\"type\":\"long\"},{\"name\":\"distinctSubjects\",\"type\":\"long\"},{\"name\":\"distinctObjects\",\"type\":\"long\"},{\"name\":\"exampleResources\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"VoID\",\"type\":\"string\"},{\"name\":\"VoIDPart\",\"type\":\"boolean\"},{\"name\":\"SD\",\"type\":\"string\"},{\"name\":\"SDPart\",\"type\":\"boolean\"},{\"name\":\"coherence\",\"type\":\"double\"},{\"name\":\"RS\",\"type\":\"double\"}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    @Deprecated public long triples;
    @Deprecated public long entities;
    @Deprecated public long classes;
    @Deprecated public long properties;
    @Deprecated public long distinctSubjects;
    @Deprecated public long distinctObjects;
    @Deprecated public java.util.List<java.lang.CharSequence> exampleResources;
    @Deprecated public java.lang.CharSequence VoID;
    @Deprecated public boolean VoIDPart;
    @Deprecated public java.lang.CharSequence SD;
    @Deprecated public boolean SDPart;
    @Deprecated public double coherence;
    @Deprecated public double RS;

    /**
     * Default constructor. Note that this does not initialize fields to their default values from
     * the schema. If that is desired then one should use {@link \#newBuilder()}.
     */
    public EPViewCalculation() {}

    /** All-args constructor. */
    public EPViewCalculation(
            java.lang.Long triples,
            java.lang.Long entities,
            java.lang.Long classes,
            java.lang.Long properties,
            java.lang.Long distinctSubjects,
            java.lang.Long distinctObjects,
            java.util.List<java.lang.CharSequence> exampleResources,
            java.lang.CharSequence VoID,
            java.lang.Boolean VoIDPart,
            java.lang.CharSequence SD,
            java.lang.Boolean SDPart,
            java.lang.Double coherence,
            java.lang.Double RS) {
        this.triples = triples;
        this.entities = entities;
        this.classes = classes;
        this.properties = properties;
        this.distinctSubjects = distinctSubjects;
        this.distinctObjects = distinctObjects;
        this.exampleResources = exampleResources;
        this.VoID = VoID;
        this.VoIDPart = VoIDPart;
        this.SD = SD;
        this.SDPart = SDPart;
        this.coherence = coherence;
        this.RS = RS;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return triples;
            case 1:
                return entities;
            case 2:
                return classes;
            case 3:
                return properties;
            case 4:
                return distinctSubjects;
            case 5:
                return distinctObjects;
            case 6:
                return exampleResources;
            case 7:
                return VoID;
            case 8:
                return VoIDPart;
            case 9:
                return SD;
            case 10:
                return SDPart;
            case 11:
                return coherence;
            case 12:
                return RS;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                triples = (java.lang.Long) value$;
                break;
            case 1:
                entities = (java.lang.Long) value$;
                break;
            case 2:
                classes = (java.lang.Long) value$;
                break;
            case 3:
                properties = (java.lang.Long) value$;
                break;
            case 4:
                distinctSubjects = (java.lang.Long) value$;
                break;
            case 5:
                distinctObjects = (java.lang.Long) value$;
                break;
            case 6:
                exampleResources = (java.util.List<java.lang.CharSequence>) value$;
                break;
            case 7:
                VoID = (java.lang.CharSequence) value$;
                break;
            case 8:
                VoIDPart = (java.lang.Boolean) value$;
                break;
            case 9:
                SD = (java.lang.CharSequence) value$;
                break;
            case 10:
                SDPart = (java.lang.Boolean) value$;
                break;
            case 11:
                coherence = (java.lang.Double) value$;
                break;
            case 12:
                RS = (java.lang.Double) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /** Gets the value of the 'triples' field. */
    public java.lang.Long getTriples() {
        return triples;
    }

    /**
     * Sets the value of the 'triples' field.
     *
     * @param value the value to set.
     */
    public void setTriples(java.lang.Long value) {
        this.triples = value;
    }

    /** Gets the value of the 'entities' field. */
    public java.lang.Long getEntities() {
        return entities;
    }

    /**
     * Sets the value of the 'entities' field.
     *
     * @param value the value to set.
     */
    public void setEntities(java.lang.Long value) {
        this.entities = value;
    }

    /** Gets the value of the 'classes' field. */
    public java.lang.Long getClasses() {
        return classes;
    }

    /**
     * Sets the value of the 'classes' field.
     *
     * @param value the value to set.
     */
    public void setClasses(java.lang.Long value) {
        this.classes = value;
    }

    /** Gets the value of the 'properties' field. */
    public java.lang.Long getProperties() {
        return properties;
    }

    /**
     * Sets the value of the 'properties' field.
     *
     * @param value the value to set.
     */
    public void setProperties(java.lang.Long value) {
        this.properties = value;
    }

    /** Gets the value of the 'distinctSubjects' field. */
    public java.lang.Long getDistinctSubjects() {
        return distinctSubjects;
    }

    /**
     * Sets the value of the 'distinctSubjects' field.
     *
     * @param value the value to set.
     */
    public void setDistinctSubjects(java.lang.Long value) {
        this.distinctSubjects = value;
    }

    /** Gets the value of the 'distinctObjects' field. */
    public java.lang.Long getDistinctObjects() {
        return distinctObjects;
    }

    /**
     * Sets the value of the 'distinctObjects' field.
     *
     * @param value the value to set.
     */
    public void setDistinctObjects(java.lang.Long value) {
        this.distinctObjects = value;
    }

    /** Gets the value of the 'exampleResources' field. */
    public java.util.List<java.lang.CharSequence> getExampleResources() {
        return exampleResources;
    }

    /**
     * Sets the value of the 'exampleResources' field.
     *
     * @param value the value to set.
     */
    public void setExampleResources(java.util.List<java.lang.CharSequence> value) {
        this.exampleResources = value;
    }

    /** Gets the value of the 'VoID' field. */
    public java.lang.CharSequence getVoID() {
        return VoID;
    }

    /**
     * Sets the value of the 'VoID' field.
     *
     * @param value the value to set.
     */
    public void setVoID(java.lang.CharSequence value) {
        this.VoID = value;
    }

    /** Gets the value of the 'VoIDPart' field. */
    public java.lang.Boolean getVoIDPart() {
        return VoIDPart;
    }

    /**
     * Sets the value of the 'VoIDPart' field.
     *
     * @param value the value to set.
     */
    public void setVoIDPart(java.lang.Boolean value) {
        this.VoIDPart = value;
    }

    /** Gets the value of the 'SD' field. */
    public java.lang.CharSequence getSD() {
        return SD;
    }

    /**
     * Sets the value of the 'SD' field.
     *
     * @param value the value to set.
     */
    public void setSD(java.lang.CharSequence value) {
        this.SD = value;
    }

    /** Gets the value of the 'SDPart' field. */
    public java.lang.Boolean getSDPart() {
        return SDPart;
    }

    /**
     * Sets the value of the 'SDPart' field.
     *
     * @param value the value to set.
     */
    public void setSDPart(java.lang.Boolean value) {
        this.SDPart = value;
    }

    /** Gets the value of the 'coherence' field. */
    public java.lang.Double getCoherence() {
        return coherence;
    }

    /**
     * Sets the value of the 'coherence' field.
     *
     * @param value the value to set.
     */
    public void setCoherence(java.lang.Double value) {
        this.coherence = value;
    }

    /** Gets the value of the 'RS' field. */
    public java.lang.Double getRS() {
        return RS;
    }

    /**
     * Sets the value of the 'RS' field.
     *
     * @param value the value to set.
     */
    public void setRS(java.lang.Double value) {
        this.RS = value;
    }

    /** Creates a new EPViewCalculation RecordBuilder */
    public static sparqles.avro.analytics.EPViewCalculation.Builder newBuilder() {
        return new sparqles.avro.analytics.EPViewCalculation.Builder();
    }

    /** Creates a new EPViewCalculation RecordBuilder by copying an existing Builder */
    public static sparqles.avro.analytics.EPViewCalculation.Builder newBuilder(
            sparqles.avro.analytics.EPViewCalculation.Builder other) {
        return new sparqles.avro.analytics.EPViewCalculation.Builder(other);
    }

    /**
     * Creates a new EPViewCalculation RecordBuilder by copying an existing EPViewCalculation
     * instance
     */
    public static sparqles.avro.analytics.EPViewCalculation.Builder newBuilder(
            sparqles.avro.analytics.EPViewCalculation other) {
        return new sparqles.avro.analytics.EPViewCalculation.Builder(other);
    }

    /** RecordBuilder for EPViewCalculation instances. */
    public static class Builder
            extends org.apache.avro.specific.SpecificRecordBuilderBase<EPViewCalculation>
            implements org.apache.avro.data.RecordBuilder<EPViewCalculation> {

        private long triples;
        private long entities;
        private long classes;
        private long properties;
        private long distinctSubjects;
        private long distinctObjects;
        private java.util.List<java.lang.CharSequence> exampleResources;
        private java.lang.CharSequence VoID;
        private boolean VoIDPart;
        private java.lang.CharSequence SD;
        private boolean SDPart;
        private double coherence;
        private double RS;

        /** Creates a new Builder */
        private Builder() {
            super(sparqles.avro.analytics.EPViewCalculation.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(sparqles.avro.analytics.EPViewCalculation.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.triples)) {
                this.triples = data().deepCopy(fields()[0].schema(), other.triples);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.entities)) {
                this.entities = data().deepCopy(fields()[1].schema(), other.entities);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.classes)) {
                this.classes = data().deepCopy(fields()[2].schema(), other.classes);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.properties)) {
                this.properties = data().deepCopy(fields()[3].schema(), other.properties);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.distinctSubjects)) {
                this.distinctSubjects =
                        data().deepCopy(fields()[4].schema(), other.distinctSubjects);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.distinctObjects)) {
                this.distinctObjects = data().deepCopy(fields()[5].schema(), other.distinctObjects);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.exampleResources)) {
                this.exampleResources =
                        data().deepCopy(fields()[6].schema(), other.exampleResources);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.VoID)) {
                this.VoID = data().deepCopy(fields()[7].schema(), other.VoID);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.VoIDPart)) {
                this.VoIDPart = data().deepCopy(fields()[8].schema(), other.VoIDPart);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.SD)) {
                this.SD = data().deepCopy(fields()[9].schema(), other.SD);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.SDPart)) {
                this.SDPart = data().deepCopy(fields()[10].schema(), other.SDPart);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.coherence)) {
                this.coherence = data().deepCopy(fields()[11].schema(), other.coherence);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.RS)) {
                this.RS = data().deepCopy(fields()[12].schema(), other.RS);
                fieldSetFlags()[12] = true;
            }
        }

        /** Creates a Builder by copying an existing EPViewCalculation instance */
        private Builder(sparqles.avro.analytics.EPViewCalculation other) {
            super(sparqles.avro.analytics.EPViewCalculation.SCHEMA$);
            if (isValidValue(fields()[0], other.triples)) {
                this.triples = data().deepCopy(fields()[0].schema(), other.triples);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.entities)) {
                this.entities = data().deepCopy(fields()[1].schema(), other.entities);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.classes)) {
                this.classes = data().deepCopy(fields()[2].schema(), other.classes);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.properties)) {
                this.properties = data().deepCopy(fields()[3].schema(), other.properties);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.distinctSubjects)) {
                this.distinctSubjects =
                        data().deepCopy(fields()[4].schema(), other.distinctSubjects);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.distinctObjects)) {
                this.distinctObjects = data().deepCopy(fields()[5].schema(), other.distinctObjects);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.exampleResources)) {
                this.exampleResources =
                        data().deepCopy(fields()[6].schema(), other.exampleResources);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.VoID)) {
                this.VoID = data().deepCopy(fields()[7].schema(), other.VoID);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.VoIDPart)) {
                this.VoIDPart = data().deepCopy(fields()[8].schema(), other.VoIDPart);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.SD)) {
                this.SD = data().deepCopy(fields()[9].schema(), other.SD);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.SDPart)) {
                this.SDPart = data().deepCopy(fields()[10].schema(), other.SDPart);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.coherence)) {
                this.coherence = data().deepCopy(fields()[11].schema(), other.coherence);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.RS)) {
                this.RS = data().deepCopy(fields()[12].schema(), other.RS);
                fieldSetFlags()[12] = true;
            }
        }

        /** Gets the value of the 'triples' field */
        public java.lang.Long getTriples() {
            return triples;
        }

        /** Sets the value of the 'triples' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder setTriples(long value) {
            validate(fields()[0], value);
            this.triples = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'triples' field has been set */
        public boolean hasTriples() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'triples' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearTriples() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'entities' field */
        public java.lang.Long getEntities() {
            return entities;
        }

        /** Sets the value of the 'entities' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder setEntities(long value) {
            validate(fields()[1], value);
            this.entities = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'entities' field has been set */
        public boolean hasEntities() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'entities' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearEntities() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /** Gets the value of the 'classes' field */
        public java.lang.Long getClasses() {
            return classes;
        }

        /** Sets the value of the 'classes' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder setClasses(long value) {
            validate(fields()[2], value);
            this.classes = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /** Checks whether the 'classes' field has been set */
        public boolean hasClasses() {
            return fieldSetFlags()[2];
        }

        /** Clears the value of the 'classes' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearClasses() {
            fieldSetFlags()[2] = false;
            return this;
        }

        /** Gets the value of the 'properties' field */
        public java.lang.Long getProperties() {
            return properties;
        }

        /** Sets the value of the 'properties' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder setProperties(long value) {
            validate(fields()[3], value);
            this.properties = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /** Checks whether the 'properties' field has been set */
        public boolean hasProperties() {
            return fieldSetFlags()[3];
        }

        /** Clears the value of the 'properties' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearProperties() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /** Gets the value of the 'distinctSubjects' field */
        public java.lang.Long getDistinctSubjects() {
            return distinctSubjects;
        }

        /** Sets the value of the 'distinctSubjects' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder setDistinctSubjects(long value) {
            validate(fields()[4], value);
            this.distinctSubjects = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /** Checks whether the 'distinctSubjects' field has been set */
        public boolean hasDistinctSubjects() {
            return fieldSetFlags()[4];
        }

        /** Clears the value of the 'distinctSubjects' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearDistinctSubjects() {
            fieldSetFlags()[4] = false;
            return this;
        }

        /** Gets the value of the 'distinctObjects' field */
        public java.lang.Long getDistinctObjects() {
            return distinctObjects;
        }

        /** Sets the value of the 'distinctObjects' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder setDistinctObjects(long value) {
            validate(fields()[5], value);
            this.distinctObjects = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /** Checks whether the 'distinctObjects' field has been set */
        public boolean hasDistinctObjects() {
            return fieldSetFlags()[5];
        }

        /** Clears the value of the 'distinctObjects' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearDistinctObjects() {
            fieldSetFlags()[5] = false;
            return this;
        }

        /** Gets the value of the 'exampleResources' field */
        public java.util.List<java.lang.CharSequence> getExampleResources() {
            return exampleResources;
        }

        /** Sets the value of the 'exampleResources' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder setExampleResources(
                java.util.List<java.lang.CharSequence> value) {
            validate(fields()[6], value);
            this.exampleResources = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /** Checks whether the 'exampleResources' field has been set */
        public boolean hasExampleResources() {
            return fieldSetFlags()[6];
        }

        /** Clears the value of the 'exampleResources' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearExampleResources() {
            exampleResources = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /** Gets the value of the 'VoID' field */
        public java.lang.CharSequence getVoID() {
            return VoID;
        }

        /** Sets the value of the 'VoID' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder setVoID(
                java.lang.CharSequence value) {
            validate(fields()[7], value);
            this.VoID = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /** Checks whether the 'VoID' field has been set */
        public boolean hasVoID() {
            return fieldSetFlags()[7];
        }

        /** Clears the value of the 'VoID' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearVoID() {
            VoID = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /** Gets the value of the 'VoIDPart' field */
        public java.lang.Boolean getVoIDPart() {
            return VoIDPart;
        }

        /** Sets the value of the 'VoIDPart' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder setVoIDPart(boolean value) {
            validate(fields()[8], value);
            this.VoIDPart = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /** Checks whether the 'VoIDPart' field has been set */
        public boolean hasVoIDPart() {
            return fieldSetFlags()[8];
        }

        /** Clears the value of the 'VoIDPart' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearVoIDPart() {
            fieldSetFlags()[8] = false;
            return this;
        }

        /** Gets the value of the 'SD' field */
        public java.lang.CharSequence getSD() {
            return SD;
        }

        /** Sets the value of the 'SD' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder setSD(
                java.lang.CharSequence value) {
            validate(fields()[9], value);
            this.SD = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /** Checks whether the 'SD' field has been set */
        public boolean hasSD() {
            return fieldSetFlags()[9];
        }

        /** Clears the value of the 'SD' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearSD() {
            SD = null;
            fieldSetFlags()[9] = false;
            return this;
        }

        /** Gets the value of the 'SDPart' field */
        public java.lang.Boolean getSDPart() {
            return SDPart;
        }

        /** Sets the value of the 'SDPart' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder setSDPart(boolean value) {
            validate(fields()[10], value);
            this.SDPart = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /** Checks whether the 'SDPart' field has been set */
        public boolean hasSDPart() {
            return fieldSetFlags()[10];
        }

        /** Clears the value of the 'SDPart' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearSDPart() {
            fieldSetFlags()[10] = false;
            return this;
        }

        /** Gets the value of the 'coherence' field */
        public java.lang.Double getCoherence() {
            return coherence;
        }

        /** Sets the value of the 'coherence' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder setCoherence(double value) {
            validate(fields()[11], value);
            this.coherence = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /** Checks whether the 'coherence' field has been set */
        public boolean hasCoherence() {
            return fieldSetFlags()[11];
        }

        /** Clears the value of the 'coherence' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearCoherence() {
            fieldSetFlags()[11] = false;
            return this;
        }

        /** Gets the value of the 'RS' field */
        public java.lang.Double getRS() {
            return RS;
        }

        /** Sets the value of the 'RS' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder setRS(double value) {
            validate(fields()[12], value);
            this.RS = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /** Checks whether the 'RS' field has been set */
        public boolean hasRS() {
            return fieldSetFlags()[12];
        }

        /** Clears the value of the 'RS' field */
        public sparqles.avro.analytics.EPViewCalculation.Builder clearRS() {
            fieldSetFlags()[12] = false;
            return this;
        }

        @Override
        public EPViewCalculation build() {
            try {
                EPViewCalculation record = new EPViewCalculation();
                record.triples =
                        fieldSetFlags()[0]
                                ? this.triples
                                : (java.lang.Long) defaultValue(fields()[0]);
                record.entities =
                        fieldSetFlags()[1]
                                ? this.entities
                                : (java.lang.Long) defaultValue(fields()[1]);
                record.classes =
                        fieldSetFlags()[2]
                                ? this.classes
                                : (java.lang.Long) defaultValue(fields()[2]);
                record.properties =
                        fieldSetFlags()[3]
                                ? this.properties
                                : (java.lang.Long) defaultValue(fields()[3]);
                record.distinctSubjects =
                        fieldSetFlags()[4]
                                ? this.distinctSubjects
                                : (java.lang.Long) defaultValue(fields()[4]);
                record.distinctObjects =
                        fieldSetFlags()[5]
                                ? this.distinctObjects
                                : (java.lang.Long) defaultValue(fields()[5]);
                record.exampleResources =
                        fieldSetFlags()[6]
                                ? this.exampleResources
                                : (java.util.List<java.lang.CharSequence>)
                                        defaultValue(fields()[6]);
                record.VoID =
                        fieldSetFlags()[7]
                                ? this.VoID
                                : (java.lang.CharSequence) defaultValue(fields()[7]);
                record.VoIDPart =
                        fieldSetFlags()[8]
                                ? this.VoIDPart
                                : (java.lang.Boolean) defaultValue(fields()[8]);
                record.SD =
                        fieldSetFlags()[9]
                                ? this.SD
                                : (java.lang.CharSequence) defaultValue(fields()[9]);
                record.SDPart =
                        fieldSetFlags()[10]
                                ? this.SDPart
                                : (java.lang.Boolean) defaultValue(fields()[10]);
                record.coherence =
                        fieldSetFlags()[11]
                                ? this.coherence
                                : (java.lang.Double) defaultValue(fields()[11]);
                record.RS =
                        fieldSetFlags()[12]
                                ? this.RS
                                : (java.lang.Double) defaultValue(fields()[12]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
