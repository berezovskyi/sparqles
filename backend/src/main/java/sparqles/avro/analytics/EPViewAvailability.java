/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package sparqles.avro.analytics;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EPViewAvailability extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EPViewAvailability\",\"namespace\":\"sparqles.avro.analytics\",\"fields\":[{\"name\":\"upNow\",\"type\":\"boolean\"},{\"name\":\"testRuns\",\"type\":\"int\"},{\"name\":\"uptimeLast24h\",\"type\":\"double\"},{\"name\":\"uptimeLast7d\",\"type\":\"double\"},{\"name\":\"uptimeLast31d\",\"type\":\"double\"},{\"name\":\"uptimeOverall\",\"type\":\"double\"},{\"name\":\"data\",\"type\":{\"type\":\"record\",\"name\":\"EPViewAvailabilityData\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EPViewAvailabilityDataPoint\",\"fields\":[{\"name\":\"x\",\"type\":\"long\"},{\"name\":\"y\",\"type\":\"double\"}]}}}]}}]}");
    @Deprecated public boolean upNow;
    @Deprecated public int testRuns;
    @Deprecated public double uptimeLast24h;
    @Deprecated public double uptimeLast7d;
    @Deprecated public double uptimeLast31d;
    @Deprecated public double uptimeOverall;
    @Deprecated public sparqles.avro.analytics.EPViewAvailabilityData data;
    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use {@link \#newBuilder()}. 
     */
    public EPViewAvailability() {
    }
    
    /**
     * All-args constructor.
     */
    public EPViewAvailability(java.lang.Boolean upNow, java.lang.Integer testRuns, java.lang.Double uptimeLast24h, java.lang.Double uptimeLast7d, java.lang.Double uptimeLast31d, java.lang.Double uptimeOverall, sparqles.avro.analytics.EPViewAvailabilityData data) {
        this.upNow = upNow;
        this.testRuns = testRuns;
        this.uptimeLast24h = uptimeLast24h;
        this.uptimeLast7d = uptimeLast7d;
        this.uptimeLast31d = uptimeLast31d;
        this.uptimeOverall = uptimeOverall;
        this.data = data;
    }
    
    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }
    
    /** Creates a new EPViewAvailability RecordBuilder */
    public static sparqles.avro.analytics.EPViewAvailability.Builder newBuilder() {
        return new sparqles.avro.analytics.EPViewAvailability.Builder();
    }
    
    /** Creates a new EPViewAvailability RecordBuilder by copying an existing Builder */
    public static sparqles.avro.analytics.EPViewAvailability.Builder newBuilder(sparqles.avro.analytics.EPViewAvailability.Builder other) {
        return new sparqles.avro.analytics.EPViewAvailability.Builder(other);
    }
    
    /** Creates a new EPViewAvailability RecordBuilder by copying an existing EPViewAvailability instance */
    public static sparqles.avro.analytics.EPViewAvailability.Builder newBuilder(sparqles.avro.analytics.EPViewAvailability other) {
        return new sparqles.avro.analytics.EPViewAvailability.Builder(other);
    }
    
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }
    
    // Used by DatumWriter.  Applications should not call. 
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return upNow;
            case 1:
                return testRuns;
            case 2:
                return uptimeLast24h;
            case 3:
                return uptimeLast7d;
            case 4:
                return uptimeLast31d;
            case 5:
                return uptimeOverall;
            case 6:
                return data;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }
    
    // Used by DatumReader.  Applications should not call. 
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                upNow = (java.lang.Boolean) value$;
                break;
            case 1:
                testRuns = (java.lang.Integer) value$;
                break;
            case 2:
                uptimeLast24h = (java.lang.Double) value$;
                break;
            case 3:
                uptimeLast7d = (java.lang.Double) value$;
                break;
            case 4:
                uptimeLast31d = (java.lang.Double) value$;
                break;
            case 5:
                uptimeOverall = (java.lang.Double) value$;
                break;
            case 6:
                data = (sparqles.avro.analytics.EPViewAvailabilityData) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }
    
    /**
     * Gets the value of the 'upNow' field.
     */
    public java.lang.Boolean getUpNow() {
        return upNow;
    }
    
    /**
     * Sets the value of the 'upNow' field.
     * @param value the value to set.
     */
    public void setUpNow(java.lang.Boolean value) {
        this.upNow = value;
    }
    
    /**
     * Gets the value of the 'testRuns' field.
     */
    public java.lang.Integer getTestRuns() {
        return testRuns;
    }
    
    /**
     * Sets the value of the 'testRuns' field.
     * @param value the value to set.
     */
    public void setTestRuns(java.lang.Integer value) {
        this.testRuns = value;
    }
    
    /**
     * Gets the value of the 'uptimeLast24h' field.
     */
    public java.lang.Double getUptimeLast24h() {
        return uptimeLast24h;
    }
    
    /**
     * Sets the value of the 'uptimeLast24h' field.
     * @param value the value to set.
     */
    public void setUptimeLast24h(java.lang.Double value) {
        this.uptimeLast24h = value;
    }
    
    /**
     * Gets the value of the 'uptimeLast7d' field.
     */
    public java.lang.Double getUptimeLast7d() {
        return uptimeLast7d;
    }
    
    /**
     * Sets the value of the 'uptimeLast7d' field.
     * @param value the value to set.
     */
    public void setUptimeLast7d(java.lang.Double value) {
        this.uptimeLast7d = value;
    }
    
    /**
     * Gets the value of the 'uptimeLast31d' field.
     */
    public java.lang.Double getUptimeLast31d() {
        return uptimeLast31d;
    }
    
    /**
     * Sets the value of the 'uptimeLast31d' field.
     * @param value the value to set.
     */
    public void setUptimeLast31d(java.lang.Double value) {
        this.uptimeLast31d = value;
    }
    
    /**
     * Gets the value of the 'uptimeOverall' field.
     */
    public java.lang.Double getUptimeOverall() {
        return uptimeOverall;
    }
    
    /**
     * Sets the value of the 'uptimeOverall' field.
     * @param value the value to set.
     */
    public void setUptimeOverall(java.lang.Double value) {
        this.uptimeOverall = value;
    }
    
    /**
     * Gets the value of the 'data' field.
     */
    public sparqles.avro.analytics.EPViewAvailabilityData getData() {
        return data;
    }
    
    /**
     * Sets the value of the 'data' field.
     * @param value the value to set.
     */
    public void setData(sparqles.avro.analytics.EPViewAvailabilityData value) {
        this.data = value;
    }
    
    /**
     * RecordBuilder for EPViewAvailability instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EPViewAvailability>
        implements org.apache.avro.data.RecordBuilder<EPViewAvailability> {
        
        private boolean upNow;
        private int testRuns;
        private double uptimeLast24h;
        private double uptimeLast7d;
        private double uptimeLast31d;
        private double uptimeOverall;
        private sparqles.avro.analytics.EPViewAvailabilityData data;
        
        /** Creates a new Builder */
        private Builder() {
            super(sparqles.avro.analytics.EPViewAvailability.SCHEMA$);
        }
        
        /** Creates a Builder by copying an existing Builder */
        private Builder(sparqles.avro.analytics.EPViewAvailability.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.upNow)) {
                this.upNow = data().deepCopy(fields()[0].schema(), other.upNow);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.testRuns)) {
                this.testRuns = data().deepCopy(fields()[1].schema(), other.testRuns);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.uptimeLast24h)) {
                this.uptimeLast24h = data().deepCopy(fields()[2].schema(), other.uptimeLast24h);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.uptimeLast7d)) {
                this.uptimeLast7d = data().deepCopy(fields()[3].schema(), other.uptimeLast7d);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.uptimeLast31d)) {
                this.uptimeLast31d = data().deepCopy(fields()[4].schema(), other.uptimeLast31d);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.uptimeOverall)) {
                this.uptimeOverall = data().deepCopy(fields()[5].schema(), other.uptimeOverall);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.data)) {
                this.data = data().deepCopy(fields()[6].schema(), other.data);
                fieldSetFlags()[6] = true;
            }
        }
        
        /** Creates a Builder by copying an existing EPViewAvailability instance */
        private Builder(sparqles.avro.analytics.EPViewAvailability other) {
            super(sparqles.avro.analytics.EPViewAvailability.SCHEMA$);
            if (isValidValue(fields()[0], other.upNow)) {
                this.upNow = data().deepCopy(fields()[0].schema(), other.upNow);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.testRuns)) {
                this.testRuns = data().deepCopy(fields()[1].schema(), other.testRuns);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.uptimeLast24h)) {
                this.uptimeLast24h = data().deepCopy(fields()[2].schema(), other.uptimeLast24h);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.uptimeLast7d)) {
                this.uptimeLast7d = data().deepCopy(fields()[3].schema(), other.uptimeLast7d);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.uptimeLast31d)) {
                this.uptimeLast31d = data().deepCopy(fields()[4].schema(), other.uptimeLast31d);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.uptimeOverall)) {
                this.uptimeOverall = data().deepCopy(fields()[5].schema(), other.uptimeOverall);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.data)) {
                this.data = data().deepCopy(fields()[6].schema(), other.data);
                fieldSetFlags()[6] = true;
            }
        }
        
        /** Gets the value of the 'upNow' field */
        public java.lang.Boolean getUpNow() {
            return upNow;
        }
        
        /** Sets the value of the 'upNow' field */
        public sparqles.avro.analytics.EPViewAvailability.Builder setUpNow(boolean value) {
            validate(fields()[0], value);
            this.upNow = value;
            fieldSetFlags()[0] = true;
            return this;
        }
        
        /** Checks whether the 'upNow' field has been set */
        public boolean hasUpNow() {
            return fieldSetFlags()[0];
        }
        
        /** Clears the value of the 'upNow' field */
        public sparqles.avro.analytics.EPViewAvailability.Builder clearUpNow() {
            fieldSetFlags()[0] = false;
            return this;
        }
        
        /** Gets the value of the 'testRuns' field */
        public java.lang.Integer getTestRuns() {
            return testRuns;
        }
        
        /** Sets the value of the 'testRuns' field */
        public sparqles.avro.analytics.EPViewAvailability.Builder setTestRuns(int value) {
            validate(fields()[1], value);
            this.testRuns = value;
            fieldSetFlags()[1] = true;
            return this;
        }
        
        /** Checks whether the 'testRuns' field has been set */
        public boolean hasTestRuns() {
            return fieldSetFlags()[1];
        }
        
        /** Clears the value of the 'testRuns' field */
        public sparqles.avro.analytics.EPViewAvailability.Builder clearTestRuns() {
            fieldSetFlags()[1] = false;
            return this;
        }
        
        /** Gets the value of the 'uptimeLast24h' field */
        public java.lang.Double getUptimeLast24h() {
            return uptimeLast24h;
        }
        
        /** Sets the value of the 'uptimeLast24h' field */
        public sparqles.avro.analytics.EPViewAvailability.Builder setUptimeLast24h(double value) {
            validate(fields()[2], value);
            this.uptimeLast24h = value;
            fieldSetFlags()[2] = true;
            return this;
        }
        
        /** Checks whether the 'uptimeLast24h' field has been set */
        public boolean hasUptimeLast24h() {
            return fieldSetFlags()[2];
        }
        
        /** Clears the value of the 'uptimeLast24h' field */
        public sparqles.avro.analytics.EPViewAvailability.Builder clearUptimeLast24h() {
            fieldSetFlags()[2] = false;
            return this;
        }
        
        /** Gets the value of the 'uptimeLast7d' field */
        public java.lang.Double getUptimeLast7d() {
            return uptimeLast7d;
        }
        
        /** Sets the value of the 'uptimeLast7d' field */
        public sparqles.avro.analytics.EPViewAvailability.Builder setUptimeLast7d(double value) {
            validate(fields()[3], value);
            this.uptimeLast7d = value;
            fieldSetFlags()[3] = true;
            return this;
        }
        
        /** Checks whether the 'uptimeLast7d' field has been set */
        public boolean hasUptimeLast7d() {
            return fieldSetFlags()[3];
        }
        
        /** Clears the value of the 'uptimeLast7d' field */
        public sparqles.avro.analytics.EPViewAvailability.Builder clearUptimeLast7d() {
            fieldSetFlags()[3] = false;
            return this;
        }
        
        /** Gets the value of the 'uptimeLast31d' field */
        public java.lang.Double getUptimeLast31d() {
            return uptimeLast31d;
        }
        
        /** Sets the value of the 'uptimeLast31d' field */
        public sparqles.avro.analytics.EPViewAvailability.Builder setUptimeLast31d(double value) {
            validate(fields()[4], value);
            this.uptimeLast31d = value;
            fieldSetFlags()[4] = true;
            return this;
        }
        
        /** Checks whether the 'uptimeLast31d' field has been set */
        public boolean hasUptimeLast31d() {
            return fieldSetFlags()[4];
        }
        
        /** Clears the value of the 'uptimeLast31d' field */
        public sparqles.avro.analytics.EPViewAvailability.Builder clearUptimeLast31d() {
            fieldSetFlags()[4] = false;
            return this;
        }
        
        /** Gets the value of the 'uptimeOverall' field */
        public java.lang.Double getUptimeOverall() {
            return uptimeOverall;
        }
        
        /** Sets the value of the 'uptimeOverall' field */
        public sparqles.avro.analytics.EPViewAvailability.Builder setUptimeOverall(double value) {
            validate(fields()[5], value);
            this.uptimeOverall = value;
            fieldSetFlags()[5] = true;
            return this;
        }
        
        /** Checks whether the 'uptimeOverall' field has been set */
        public boolean hasUptimeOverall() {
            return fieldSetFlags()[5];
        }
        
        /** Clears the value of the 'uptimeOverall' field */
        public sparqles.avro.analytics.EPViewAvailability.Builder clearUptimeOverall() {
            fieldSetFlags()[5] = false;
            return this;
        }
        
        /** Gets the value of the 'data' field */
        public sparqles.avro.analytics.EPViewAvailabilityData getData() {
            return data;
        }
        
        /** Sets the value of the 'data' field */
        public sparqles.avro.analytics.EPViewAvailability.Builder setData(sparqles.avro.analytics.EPViewAvailabilityData value) {
            validate(fields()[6], value);
            this.data = value;
            fieldSetFlags()[6] = true;
            return this;
        }
        
        /** Checks whether the 'data' field has been set */
        public boolean hasData() {
            return fieldSetFlags()[6];
        }
        
        /** Clears the value of the 'data' field */
        public sparqles.avro.analytics.EPViewAvailability.Builder clearData() {
            data = null;
            fieldSetFlags()[6] = false;
            return this;
        }
        
        @Override
        public EPViewAvailability build() {
            try {
                EPViewAvailability record = new EPViewAvailability();
                record.upNow = fieldSetFlags()[0] ? this.upNow : (java.lang.Boolean) defaultValue(fields()[0]);
                record.testRuns = fieldSetFlags()[1] ? this.testRuns : (java.lang.Integer) defaultValue(fields()[1]);
                record.uptimeLast24h = fieldSetFlags()[2] ? this.uptimeLast24h : (java.lang.Double) defaultValue(fields()[2]);
                record.uptimeLast7d = fieldSetFlags()[3] ? this.uptimeLast7d : (java.lang.Double) defaultValue(fields()[3]);
                record.uptimeLast31d = fieldSetFlags()[4] ? this.uptimeLast31d : (java.lang.Double) defaultValue(fields()[4]);
                record.uptimeOverall = fieldSetFlags()[5] ? this.uptimeOverall : (java.lang.Double) defaultValue(fields()[5]);
                record.data = fieldSetFlags()[6] ? this.data : (sparqles.avro.analytics.EPViewAvailabilityData) defaultValue(fields()[6]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
