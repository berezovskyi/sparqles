/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package sparqles.avro.analytics;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class IndexViewInterData extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9129232541384086334L;

  public static final org.apache.avro.Schema SCHEMA$ =
      new org.apache.avro.Schema.Parser()
          .parse(
              "{\"type\":\"record\",\"name\":\"IndexViewInterData\",\"namespace\":\"sparqles.avro.analytics\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"color\",\"type\":\"string\"},{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"IndexViewInterDataValues\",\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"}]}}}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<IndexViewInterData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<IndexViewInterData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   *
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<IndexViewInterData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   *
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<IndexViewInterData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link
   * SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<IndexViewInterData> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this IndexViewInterData to a ByteBuffer.
   *
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a IndexViewInterData from a ByteBuffer.
   *
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a IndexViewInterData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of
   *     this class
   */
  public static IndexViewInterData fromByteBuffer(java.nio.ByteBuffer b)
      throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence key;
  private java.lang.CharSequence color;
  private java.util.List<sparqles.avro.analytics.IndexViewInterDataValues> data;

  /**
   * Default constructor. Note that this does not initialize fields to their default values from the
   * schema. If that is desired then one should use <code>newBuilder()</code>.
   */
  public IndexViewInterData() {}

  /**
   * All-args constructor.
   *
   * @param key The new value for key
   * @param color The new value for color
   * @param data The new value for data
   */
  public IndexViewInterData(
      java.lang.CharSequence key,
      java.lang.CharSequence color,
      java.util.List<sparqles.avro.analytics.IndexViewInterDataValues> data) {
    this.key = key;
    this.color = color;
    this.data = data;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  @Override
  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return key;
      case 1:
        return color;
      case 2:
        return data;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        key = (java.lang.CharSequence) value$;
        break;
      case 1:
        color = (java.lang.CharSequence) value$;
        break;
      case 2:
        data = (java.util.List<sparqles.avro.analytics.IndexViewInterDataValues>) value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'key' field.
   *
   * @return The value of the 'key' field.
   */
  public java.lang.CharSequence getKey() {
    return key;
  }

  /**
   * Sets the value of the 'key' field.
   *
   * @param value the value to set.
   */
  public void setKey(java.lang.CharSequence value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'color' field.
   *
   * @return The value of the 'color' field.
   */
  public java.lang.CharSequence getColor() {
    return color;
  }

  /**
   * Sets the value of the 'color' field.
   *
   * @param value the value to set.
   */
  public void setColor(java.lang.CharSequence value) {
    this.color = value;
  }

  /**
   * Gets the value of the 'data' field.
   *
   * @return The value of the 'data' field.
   */
  public java.util.List<sparqles.avro.analytics.IndexViewInterDataValues> getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   *
   * @param value the value to set.
   */
  public void setData(java.util.List<sparqles.avro.analytics.IndexViewInterDataValues> value) {
    this.data = value;
  }

  /**
   * Creates a new IndexViewInterData RecordBuilder.
   *
   * @return A new IndexViewInterData RecordBuilder
   */
  public static sparqles.avro.analytics.IndexViewInterData.Builder newBuilder() {
    return new sparqles.avro.analytics.IndexViewInterData.Builder();
  }

  /**
   * Creates a new IndexViewInterData RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new IndexViewInterData RecordBuilder
   */
  public static sparqles.avro.analytics.IndexViewInterData.Builder newBuilder(
      sparqles.avro.analytics.IndexViewInterData.Builder other) {
    if (other == null) {
      return new sparqles.avro.analytics.IndexViewInterData.Builder();
    } else {
      return new sparqles.avro.analytics.IndexViewInterData.Builder(other);
    }
  }

  /**
   * Creates a new IndexViewInterData RecordBuilder by copying an existing IndexViewInterData
   * instance.
   *
   * @param other The existing instance to copy.
   * @return A new IndexViewInterData RecordBuilder
   */
  public static sparqles.avro.analytics.IndexViewInterData.Builder newBuilder(
      sparqles.avro.analytics.IndexViewInterData other) {
    if (other == null) {
      return new sparqles.avro.analytics.IndexViewInterData.Builder();
    } else {
      return new sparqles.avro.analytics.IndexViewInterData.Builder(other);
    }
  }

  /** RecordBuilder for IndexViewInterData instances. */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder
      extends org.apache.avro.specific.SpecificRecordBuilderBase<IndexViewInterData>
      implements org.apache.avro.data.RecordBuilder<IndexViewInterData> {

    private java.lang.CharSequence key;
    private java.lang.CharSequence color;
    private java.util.List<sparqles.avro.analytics.IndexViewInterDataValues> data;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(sparqles.avro.analytics.IndexViewInterData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.color)) {
        this.color = data().deepCopy(fields()[1].schema(), other.color);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing IndexViewInterData instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(sparqles.avro.analytics.IndexViewInterData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.key)) {
        this.key = data().deepCopy(fields()[0].schema(), other.key);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.color)) {
        this.color = data().deepCopy(fields()[1].schema(), other.color);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Gets the value of the 'key' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getKey() {
      return key;
    }

    /**
     * Sets the value of the 'key' field.
     *
     * @param value The value of 'key'.
     * @return This builder.
     */
    public sparqles.avro.analytics.IndexViewInterData.Builder setKey(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.key = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'key' field has been set.
     *
     * @return True if the 'key' field has been set, false otherwise.
     */
    public boolean hasKey() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'key' field.
     *
     * @return This builder.
     */
    public sparqles.avro.analytics.IndexViewInterData.Builder clearKey() {
      key = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'color' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getColor() {
      return color;
    }

    /**
     * Sets the value of the 'color' field.
     *
     * @param value The value of 'color'.
     * @return This builder.
     */
    public sparqles.avro.analytics.IndexViewInterData.Builder setColor(
        java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.color = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'color' field has been set.
     *
     * @return True if the 'color' field has been set, false otherwise.
     */
    public boolean hasColor() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'color' field.
     *
     * @return This builder.
     */
    public sparqles.avro.analytics.IndexViewInterData.Builder clearColor() {
      color = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'data' field.
     *
     * @return The value.
     */
    public java.util.List<sparqles.avro.analytics.IndexViewInterDataValues> getData() {
      return data;
    }

    /**
     * Sets the value of the 'data' field.
     *
     * @param value The value of 'data'.
     * @return This builder.
     */
    public sparqles.avro.analytics.IndexViewInterData.Builder setData(
        java.util.List<sparqles.avro.analytics.IndexViewInterDataValues> value) {
      validate(fields()[2], value);
      this.data = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'data' field has been set.
     *
     * @return True if the 'data' field has been set, false otherwise.
     */
    public boolean hasData() {
      return fieldSetFlags()[2];
    }

    /**
     * Clears the value of the 'data' field.
     *
     * @return This builder.
     */
    public sparqles.avro.analytics.IndexViewInterData.Builder clearData() {
      data = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public IndexViewInterData build() {
      try {
        IndexViewInterData record = new IndexViewInterData();
        record.key =
            fieldSetFlags()[0] ? this.key : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.color =
            fieldSetFlags()[1] ? this.color : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.data =
            fieldSetFlags()[2]
                ? this.data
                : (java.util.List<sparqles.avro.analytics.IndexViewInterDataValues>)
                    defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<IndexViewInterData> WRITER$ =
      (org.apache.avro.io.DatumWriter<IndexViewInterData>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<IndexViewInterData> READER$ =
      (org.apache.avro.io.DatumReader<IndexViewInterData>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
    out.writeString(this.key);

    out.writeString(this.color);

    long size0 = this.data.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (sparqles.avro.analytics.IndexViewInterDataValues e0 : this.data) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException(
          "Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.key = in.readString(this.key instanceof Utf8 ? (Utf8) this.key : null);

      this.color = in.readString(this.color instanceof Utf8 ? (Utf8) this.color : null);

      long size0 = in.readArrayStart();
      java.util.List<sparqles.avro.analytics.IndexViewInterDataValues> a0 = this.data;
      if (a0 == null) {
        a0 =
            new SpecificData.Array<sparqles.avro.analytics.IndexViewInterDataValues>(
                (int) size0, SCHEMA$.getField("data").schema());
        this.data = a0;
      } else a0.clear();
      SpecificData.Array<sparqles.avro.analytics.IndexViewInterDataValues> ga0 =
          (a0 instanceof SpecificData.Array
              ? (SpecificData.Array<sparqles.avro.analytics.IndexViewInterDataValues>) a0
              : null);
      for (; 0 < size0; size0 = in.arrayNext()) {
        for (; size0 != 0; size0--) {
          sparqles.avro.analytics.IndexViewInterDataValues e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new sparqles.avro.analytics.IndexViewInterDataValues();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.key = in.readString(this.key instanceof Utf8 ? (Utf8) this.key : null);
            break;

          case 1:
            this.color = in.readString(this.color instanceof Utf8 ? (Utf8) this.color : null);
            break;

          case 2:
            long size0 = in.readArrayStart();
            java.util.List<sparqles.avro.analytics.IndexViewInterDataValues> a0 = this.data;
            if (a0 == null) {
              a0 =
                  new SpecificData.Array<sparqles.avro.analytics.IndexViewInterDataValues>(
                      (int) size0, SCHEMA$.getField("data").schema());
              this.data = a0;
            } else a0.clear();
            SpecificData.Array<sparqles.avro.analytics.IndexViewInterDataValues> ga0 =
                (a0 instanceof SpecificData.Array
                    ? (SpecificData.Array<sparqles.avro.analytics.IndexViewInterDataValues>) a0
                    : null);
            for (; 0 < size0; size0 = in.arrayNext()) {
              for (; size0 != 0; size0--) {
                sparqles.avro.analytics.IndexViewInterDataValues e0 =
                    (ga0 != null ? ga0.peek() : null);
                if (e0 == null) {
                  e0 = new sparqles.avro.analytics.IndexViewInterDataValues();
                }
                e0.customDecode(in);
                a0.add(e0);
              }
            }
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}
