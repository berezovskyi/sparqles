/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package sparqles.avro.analytics;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EPViewPerformance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EPViewPerformance\",\"namespace\":\"sparqles.avro.analytics\",\"fields\":[{\"name\":\"threshold\",\"type\":\"long\"},{\"name\":\"ask\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EPViewPerformanceData\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"color\",\"type\":\"string\"},{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EPViewPerformanceDataValues\",\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"},{\"name\":\"exception\",\"type\":[\"string\",\"null\"]}]}}}]}}},{\"name\":\"join\",\"type\":{\"type\":\"array\",\"items\":\"EPViewPerformanceData\"}}]}");
    @Deprecated public long threshold;
    @Deprecated public java.util.List<sparqles.avro.analytics.EPViewPerformanceData> ask;
    @Deprecated public java.util.List<sparqles.avro.analytics.EPViewPerformanceData> join;
    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use {@link \#newBuilder()}. 
     */
    public EPViewPerformance() {
    }
    
    /**
     * All-args constructor.
     */
    public EPViewPerformance(java.lang.Long threshold, java.util.List<sparqles.avro.analytics.EPViewPerformanceData> ask, java.util.List<sparqles.avro.analytics.EPViewPerformanceData> join) {
        this.threshold = threshold;
        this.ask = ask;
        this.join = join;
    }
    
    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }
    
    /** Creates a new EPViewPerformance RecordBuilder */
    public static sparqles.avro.analytics.EPViewPerformance.Builder newBuilder() {
        return new sparqles.avro.analytics.EPViewPerformance.Builder();
    }
    
    /** Creates a new EPViewPerformance RecordBuilder by copying an existing Builder */
    public static sparqles.avro.analytics.EPViewPerformance.Builder newBuilder(sparqles.avro.analytics.EPViewPerformance.Builder other) {
        return new sparqles.avro.analytics.EPViewPerformance.Builder(other);
    }
    
    /** Creates a new EPViewPerformance RecordBuilder by copying an existing EPViewPerformance instance */
    public static sparqles.avro.analytics.EPViewPerformance.Builder newBuilder(sparqles.avro.analytics.EPViewPerformance other) {
        return new sparqles.avro.analytics.EPViewPerformance.Builder(other);
    }
    
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }
    
    // Used by DatumWriter.  Applications should not call. 
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return threshold;
            case 1:
                return ask;
            case 2:
                return join;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }
    
    // Used by DatumReader.  Applications should not call. 
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                threshold = (java.lang.Long) value$;
                break;
            case 1:
                ask = (java.util.List<sparqles.avro.analytics.EPViewPerformanceData>) value$;
                break;
            case 2:
                join = (java.util.List<sparqles.avro.analytics.EPViewPerformanceData>) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }
    
    /**
     * Gets the value of the 'threshold' field.
     */
    public java.lang.Long getThreshold() {
        return threshold;
    }
    
    /**
     * Sets the value of the 'threshold' field.
     * @param value the value to set.
     */
    public void setThreshold(java.lang.Long value) {
        this.threshold = value;
    }
    
    /**
     * Gets the value of the 'ask' field.
     */
    public java.util.List<sparqles.avro.analytics.EPViewPerformanceData> getAsk() {
        return ask;
    }
    
    /**
     * Sets the value of the 'ask' field.
     * @param value the value to set.
     */
    public void setAsk(java.util.List<sparqles.avro.analytics.EPViewPerformanceData> value) {
        this.ask = value;
    }
    
    /**
     * Gets the value of the 'join' field.
     */
    public java.util.List<sparqles.avro.analytics.EPViewPerformanceData> getJoin() {
        return join;
    }
    
    /**
     * Sets the value of the 'join' field.
     * @param value the value to set.
     */
    public void setJoin(java.util.List<sparqles.avro.analytics.EPViewPerformanceData> value) {
        this.join = value;
    }
    
    /**
     * RecordBuilder for EPViewPerformance instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EPViewPerformance>
        implements org.apache.avro.data.RecordBuilder<EPViewPerformance> {
        
        private long threshold;
        private java.util.List<sparqles.avro.analytics.EPViewPerformanceData> ask;
        private java.util.List<sparqles.avro.analytics.EPViewPerformanceData> join;
        
        /** Creates a new Builder */
        private Builder() {
            super(sparqles.avro.analytics.EPViewPerformance.SCHEMA$);
        }
        
        /** Creates a Builder by copying an existing Builder */
        private Builder(sparqles.avro.analytics.EPViewPerformance.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.threshold)) {
                this.threshold = data().deepCopy(fields()[0].schema(), other.threshold);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.ask)) {
                this.ask = data().deepCopy(fields()[1].schema(), other.ask);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.join)) {
                this.join = data().deepCopy(fields()[2].schema(), other.join);
                fieldSetFlags()[2] = true;
            }
        }
        
        /** Creates a Builder by copying an existing EPViewPerformance instance */
        private Builder(sparqles.avro.analytics.EPViewPerformance other) {
            super(sparqles.avro.analytics.EPViewPerformance.SCHEMA$);
            if (isValidValue(fields()[0], other.threshold)) {
                this.threshold = data().deepCopy(fields()[0].schema(), other.threshold);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.ask)) {
                this.ask = data().deepCopy(fields()[1].schema(), other.ask);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.join)) {
                this.join = data().deepCopy(fields()[2].schema(), other.join);
                fieldSetFlags()[2] = true;
            }
        }
        
        /** Gets the value of the 'threshold' field */
        public java.lang.Long getThreshold() {
            return threshold;
        }
        
        /** Sets the value of the 'threshold' field */
        public sparqles.avro.analytics.EPViewPerformance.Builder setThreshold(long value) {
            validate(fields()[0], value);
            this.threshold = value;
            fieldSetFlags()[0] = true;
            return this;
        }
        
        /** Checks whether the 'threshold' field has been set */
        public boolean hasThreshold() {
            return fieldSetFlags()[0];
        }
        
        /** Clears the value of the 'threshold' field */
        public sparqles.avro.analytics.EPViewPerformance.Builder clearThreshold() {
            fieldSetFlags()[0] = false;
            return this;
        }
        
        /** Gets the value of the 'ask' field */
        public java.util.List<sparqles.avro.analytics.EPViewPerformanceData> getAsk() {
            return ask;
        }
        
        /** Sets the value of the 'ask' field */
        public sparqles.avro.analytics.EPViewPerformance.Builder setAsk(java.util.List<sparqles.avro.analytics.EPViewPerformanceData> value) {
            validate(fields()[1], value);
            this.ask = value;
            fieldSetFlags()[1] = true;
            return this;
        }
        
        /** Checks whether the 'ask' field has been set */
        public boolean hasAsk() {
            return fieldSetFlags()[1];
        }
        
        /** Clears the value of the 'ask' field */
        public sparqles.avro.analytics.EPViewPerformance.Builder clearAsk() {
            ask = null;
            fieldSetFlags()[1] = false;
            return this;
        }
        
        /** Gets the value of the 'join' field */
        public java.util.List<sparqles.avro.analytics.EPViewPerformanceData> getJoin() {
            return join;
        }
        
        /** Sets the value of the 'join' field */
        public sparqles.avro.analytics.EPViewPerformance.Builder setJoin(java.util.List<sparqles.avro.analytics.EPViewPerformanceData> value) {
            validate(fields()[2], value);
            this.join = value;
            fieldSetFlags()[2] = true;
            return this;
        }
        
        /** Checks whether the 'join' field has been set */
        public boolean hasJoin() {
            return fieldSetFlags()[2];
        }
        
        /** Clears the value of the 'join' field */
        public sparqles.avro.analytics.EPViewPerformance.Builder clearJoin() {
            join = null;
            fieldSetFlags()[2] = false;
            return this;
        }
        
        @Override
        public EPViewPerformance build() {
            try {
                EPViewPerformance record = new EPViewPerformance();
                record.threshold = fieldSetFlags()[0] ? this.threshold : (java.lang.Long) defaultValue(fields()[0]);
                record.ask = fieldSetFlags()[1] ? this.ask : (java.util.List<sparqles.avro.analytics.EPViewPerformanceData>) defaultValue(fields()[1]);
                record.join = fieldSetFlags()[2] ? this.join : (java.util.List<sparqles.avro.analytics.EPViewPerformanceData>) defaultValue(fields()[2]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
