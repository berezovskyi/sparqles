/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package sparqles.avro.analytics;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class EPViewInteroperabilityData extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1601108824774484276L;

  public static final org.apache.avro.Schema SCHEMA$ =
      new org.apache.avro.Schema.Parser()
          .parse(
              "{\"type\":\"record\",\"name\":\"EPViewInteroperabilityData\",\"namespace\":\"sparqles.avro.analytics\",\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"boolean\"},{\"name\":\"exception\",\"type\":[\"string\",\"null\"]}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EPViewInteroperabilityData> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EPViewInteroperabilityData> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   *
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EPViewInteroperabilityData> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   *
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EPViewInteroperabilityData> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link
   * SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EPViewInteroperabilityData> createDecoder(
      SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EPViewInteroperabilityData to a ByteBuffer.
   *
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EPViewInteroperabilityData from a ByteBuffer.
   *
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EPViewInteroperabilityData instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of
   *     this class
   */
  public static EPViewInteroperabilityData fromByteBuffer(java.nio.ByteBuffer b)
      throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence label;
  private boolean value;
  private java.lang.CharSequence exception;

  /**
   * Default constructor. Note that this does not initialize fields to their default values from the
   * schema. If that is desired then one should use <code>newBuilder()</code>.
   */
  public EPViewInteroperabilityData() {}

  /**
   * All-args constructor.
   *
   * @param label The new value for label
   * @param value The new value for value
   * @param exception The new value for exception
   */
  public EPViewInteroperabilityData(
      java.lang.CharSequence label, java.lang.Boolean value, java.lang.CharSequence exception) {
    this.label = label;
    this.value = value;
    this.exception = exception;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  @Override
  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return label;
      case 1:
        return value;
      case 2:
        return exception;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        label = (java.lang.CharSequence) value$;
        break;
      case 1:
        value = (java.lang.Boolean) value$;
        break;
      case 2:
        exception = (java.lang.CharSequence) value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'label' field.
   *
   * @return The value of the 'label' field.
   */
  public java.lang.CharSequence getLabel() {
    return label;
  }

  /**
   * Sets the value of the 'label' field.
   *
   * @param value the value to set.
   */
  public void setLabel(java.lang.CharSequence value) {
    this.label = value;
  }

  /**
   * Gets the value of the 'value' field.
   *
   * @return The value of the 'value' field.
   */
  public boolean getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   *
   * @param value the value to set.
   */
  public void setValue(boolean value) {
    this.value = value;
  }

  /**
   * Gets the value of the 'exception' field.
   *
   * @return The value of the 'exception' field.
   */
  public java.lang.CharSequence getException() {
    return exception;
  }

  /**
   * Sets the value of the 'exception' field.
   *
   * @param value the value to set.
   */
  public void setException(java.lang.CharSequence value) {
    this.exception = value;
  }

  /**
   * Creates a new EPViewInteroperabilityData RecordBuilder.
   *
   * @return A new EPViewInteroperabilityData RecordBuilder
   */
  public static sparqles.avro.analytics.EPViewInteroperabilityData.Builder newBuilder() {
    return new sparqles.avro.analytics.EPViewInteroperabilityData.Builder();
  }

  /**
   * Creates a new EPViewInteroperabilityData RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new EPViewInteroperabilityData RecordBuilder
   */
  public static sparqles.avro.analytics.EPViewInteroperabilityData.Builder newBuilder(
      sparqles.avro.analytics.EPViewInteroperabilityData.Builder other) {
    if (other == null) {
      return new sparqles.avro.analytics.EPViewInteroperabilityData.Builder();
    } else {
      return new sparqles.avro.analytics.EPViewInteroperabilityData.Builder(other);
    }
  }

  /**
   * Creates a new EPViewInteroperabilityData RecordBuilder by copying an existing
   * EPViewInteroperabilityData instance.
   *
   * @param other The existing instance to copy.
   * @return A new EPViewInteroperabilityData RecordBuilder
   */
  public static sparqles.avro.analytics.EPViewInteroperabilityData.Builder newBuilder(
      sparqles.avro.analytics.EPViewInteroperabilityData other) {
    if (other == null) {
      return new sparqles.avro.analytics.EPViewInteroperabilityData.Builder();
    } else {
      return new sparqles.avro.analytics.EPViewInteroperabilityData.Builder(other);
    }
  }

  /** RecordBuilder for EPViewInteroperabilityData instances. */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder
      extends org.apache.avro.specific.SpecificRecordBuilderBase<EPViewInteroperabilityData>
      implements org.apache.avro.data.RecordBuilder<EPViewInteroperabilityData> {

    private java.lang.CharSequence label;
    private boolean value;
    private java.lang.CharSequence exception;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(sparqles.avro.analytics.EPViewInteroperabilityData.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.label)) {
        this.label = data().deepCopy(fields()[0].schema(), other.label);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.exception)) {
        this.exception = data().deepCopy(fields()[2].schema(), other.exception);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing EPViewInteroperabilityData instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(sparqles.avro.analytics.EPViewInteroperabilityData other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.label)) {
        this.label = data().deepCopy(fields()[0].schema(), other.label);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.value)) {
        this.value = data().deepCopy(fields()[1].schema(), other.value);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.exception)) {
        this.exception = data().deepCopy(fields()[2].schema(), other.exception);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Gets the value of the 'label' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getLabel() {
      return label;
    }

    /**
     * Sets the value of the 'label' field.
     *
     * @param value The value of 'label'.
     * @return This builder.
     */
    public sparqles.avro.analytics.EPViewInteroperabilityData.Builder setLabel(
        java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.label = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'label' field has been set.
     *
     * @return True if the 'label' field has been set, false otherwise.
     */
    public boolean hasLabel() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'label' field.
     *
     * @return This builder.
     */
    public sparqles.avro.analytics.EPViewInteroperabilityData.Builder clearLabel() {
      label = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'value' field.
     *
     * @return The value.
     */
    public boolean getValue() {
      return value;
    }

    /**
     * Sets the value of the 'value' field.
     *
     * @param value The value of 'value'.
     * @return This builder.
     */
    public sparqles.avro.analytics.EPViewInteroperabilityData.Builder setValue(boolean value) {
      validate(fields()[1], value);
      this.value = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'value' field has been set.
     *
     * @return True if the 'value' field has been set, false otherwise.
     */
    public boolean hasValue() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'value' field.
     *
     * @return This builder.
     */
    public sparqles.avro.analytics.EPViewInteroperabilityData.Builder clearValue() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'exception' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getException() {
      return exception;
    }

    /**
     * Sets the value of the 'exception' field.
     *
     * @param value The value of 'exception'.
     * @return This builder.
     */
    public sparqles.avro.analytics.EPViewInteroperabilityData.Builder setException(
        java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.exception = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'exception' field has been set.
     *
     * @return True if the 'exception' field has been set, false otherwise.
     */
    public boolean hasException() {
      return fieldSetFlags()[2];
    }

    /**
     * Clears the value of the 'exception' field.
     *
     * @return This builder.
     */
    public sparqles.avro.analytics.EPViewInteroperabilityData.Builder clearException() {
      exception = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EPViewInteroperabilityData build() {
      try {
        EPViewInteroperabilityData record = new EPViewInteroperabilityData();
        record.label =
            fieldSetFlags()[0] ? this.label : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.value =
            fieldSetFlags()[1] ? this.value : (java.lang.Boolean) defaultValue(fields()[1]);
        record.exception =
            fieldSetFlags()[2]
                ? this.exception
                : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EPViewInteroperabilityData> WRITER$ =
      (org.apache.avro.io.DatumWriter<EPViewInteroperabilityData>)
          MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EPViewInteroperabilityData> READER$ =
      (org.apache.avro.io.DatumReader<EPViewInteroperabilityData>)
          MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
    out.writeString(this.label);

    out.writeBoolean(this.value);

    if (this.exception == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.exception);
    }
  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.label = in.readString(this.label instanceof Utf8 ? (Utf8) this.label : null);

      this.value = in.readBoolean();

      if (in.readIndex() != 0) {
        in.readNull();
        this.exception = null;
      } else {
        this.exception =
            in.readString(this.exception instanceof Utf8 ? (Utf8) this.exception : null);
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.label = in.readString(this.label instanceof Utf8 ? (Utf8) this.label : null);
            break;

          case 1:
            this.value = in.readBoolean();
            break;

          case 2:
            if (in.readIndex() != 0) {
              in.readNull();
              this.exception = null;
            } else {
              this.exception =
                  in.readString(this.exception instanceof Utf8 ? (Utf8) this.exception : null);
            }
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}
