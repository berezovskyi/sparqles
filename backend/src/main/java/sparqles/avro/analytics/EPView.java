/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package sparqles.avro.analytics;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class EPView extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -4439798892522209711L;

    public static final org.apache.avro.Schema SCHEMA$ =
            new org.apache.avro.Schema.Parser()
                    .parse(
                            "{\"type\":\"record\",\"name\":\"EPView\",\"namespace\":\"sparqles.avro.analytics\",\"fields\":[{\"name\":\"endpoint\",\"type\":{\"type\":\"record\",\"name\":\"Endpoint\",\"namespace\":\"sparqles.avro\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"datasets\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Dataset\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"label\",\"type\":\"string\"}]}}}]}},{\"name\":\"availability\",\"type\":{\"type\":\"record\",\"name\":\"EPViewAvailability\",\"fields\":[{\"name\":\"upNow\",\"type\":\"boolean\"},{\"name\":\"testRuns\",\"type\":\"int\"},{\"name\":\"uptimeLast24h\",\"type\":\"double\"},{\"name\":\"uptimeLast7d\",\"type\":\"double\"},{\"name\":\"uptimeLast31d\",\"type\":\"double\"},{\"name\":\"uptimeOverall\",\"type\":\"double\"},{\"name\":\"data\",\"type\":{\"type\":\"record\",\"name\":\"EPViewAvailabilityData\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EPViewAvailabilityDataPoint\",\"fields\":[{\"name\":\"x\",\"type\":\"long\"},{\"name\":\"y\",\"type\":\"double\"}]}}}]}}]}},{\"name\":\"performance\",\"type\":{\"type\":\"record\",\"name\":\"EPViewPerformance\",\"fields\":[{\"name\":\"threshold\",\"type\":\"long\"},{\"name\":\"ask\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EPViewPerformanceData\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"color\",\"type\":\"string\"},{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EPViewPerformanceDataValues\",\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"},{\"name\":\"exception\",\"type\":[\"string\",\"null\"]}]}}}]}}},{\"name\":\"join\",\"type\":{\"type\":\"array\",\"items\":\"EPViewPerformanceData\"}}]}},{\"name\":\"interoperability\",\"type\":{\"type\":\"record\",\"name\":\"EPViewInteroperability\",\"fields\":[{\"name\":\"SPARQL1Features\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EPViewInteroperabilityData\",\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"boolean\"},{\"name\":\"exception\",\"type\":[\"string\",\"null\"]}]}}},{\"name\":\"SPARQL11Features\",\"type\":{\"type\":\"array\",\"items\":\"EPViewInteroperabilityData\"}}]}},{\"name\":\"discoverability\",\"type\":{\"type\":\"record\",\"name\":\"EPViewDiscoverability\",\"fields\":[{\"name\":\"serverName\",\"type\":\"string\"},{\"name\":\"VoIDDescription\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EPViewDiscoverabilityData\",\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"boolean\"}]}}},{\"name\":\"SDDescription\",\"type\":{\"type\":\"array\",\"items\":\"EPViewDiscoverabilityData\"}}]}},{\"name\":\"calculation\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"EPViewCalculation\",\"fields\":[{\"name\":\"triples\",\"type\":\"long\"},{\"name\":\"entities\",\"type\":\"long\"},{\"name\":\"classes\",\"type\":\"long\"},{\"name\":\"properties\",\"type\":\"long\"},{\"name\":\"distinctSubjects\",\"type\":\"long\"},{\"name\":\"distinctObjects\",\"type\":\"long\"},{\"name\":\"exampleResources\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"VoID\",\"type\":\"string\"},{\"name\":\"VoIDPart\",\"type\":\"boolean\"},{\"name\":\"SD\",\"type\":\"string\"},{\"name\":\"SDPart\",\"type\":\"boolean\"},{\"name\":\"coherence\",\"type\":\"double\"},{\"name\":\"RS\",\"type\":\"double\"}]}]}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<EPView> ENCODER =
            new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<EPView> DECODER =
            new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<EPView> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<EPView> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link
     * SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<EPView> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this EPView to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a EPView from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a EPView instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of
     *     this class
     */
    public static EPView fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    private sparqles.avro.Endpoint endpoint;
    private sparqles.avro.analytics.EPViewAvailability availability;
    private sparqles.avro.analytics.EPViewPerformance performance;
    private sparqles.avro.analytics.EPViewInteroperability interoperability;
    private sparqles.avro.analytics.EPViewDiscoverability discoverability;
    private sparqles.avro.analytics.EPViewCalculation calculation;

    /**
     * Default constructor. Note that this does not initialize fields to their default values from
     * the schema. If that is desired then one should use <code>newBuilder()</code>.
     */
    public EPView() {}

    /**
     * All-args constructor.
     *
     * @param endpoint The new value for endpoint
     * @param availability The new value for availability
     * @param performance The new value for performance
     * @param interoperability The new value for interoperability
     * @param discoverability The new value for discoverability
     * @param calculation The new value for calculation
     */
    public EPView(
            sparqles.avro.Endpoint endpoint,
            sparqles.avro.analytics.EPViewAvailability availability,
            sparqles.avro.analytics.EPViewPerformance performance,
            sparqles.avro.analytics.EPViewInteroperability interoperability,
            sparqles.avro.analytics.EPViewDiscoverability discoverability,
            sparqles.avro.analytics.EPViewCalculation calculation) {
        this.endpoint = endpoint;
        this.availability = availability;
        this.performance = performance;
        this.interoperability = interoperability;
        this.discoverability = discoverability;
        this.calculation = calculation;
    }

    @Override
    public org.apache.avro.specific.SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return endpoint;
            case 1:
                return availability;
            case 2:
                return performance;
            case 3:
                return interoperability;
            case 4:
                return discoverability;
            case 5:
                return calculation;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                endpoint = (sparqles.avro.Endpoint) value$;
                break;
            case 1:
                availability = (sparqles.avro.analytics.EPViewAvailability) value$;
                break;
            case 2:
                performance = (sparqles.avro.analytics.EPViewPerformance) value$;
                break;
            case 3:
                interoperability = (sparqles.avro.analytics.EPViewInteroperability) value$;
                break;
            case 4:
                discoverability = (sparqles.avro.analytics.EPViewDiscoverability) value$;
                break;
            case 5:
                calculation = (sparqles.avro.analytics.EPViewCalculation) value$;
                break;
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Gets the value of the 'endpoint' field.
     *
     * @return The value of the 'endpoint' field.
     */
    public sparqles.avro.Endpoint getEndpoint() {
        return endpoint;
    }

    /**
     * Sets the value of the 'endpoint' field.
     *
     * @param value the value to set.
     */
    public void setEndpoint(sparqles.avro.Endpoint value) {
        this.endpoint = value;
    }

    /**
     * Gets the value of the 'availability' field.
     *
     * @return The value of the 'availability' field.
     */
    public sparqles.avro.analytics.EPViewAvailability getAvailability() {
        return availability;
    }

    /**
     * Sets the value of the 'availability' field.
     *
     * @param value the value to set.
     */
    public void setAvailability(sparqles.avro.analytics.EPViewAvailability value) {
        this.availability = value;
    }

    /**
     * Gets the value of the 'performance' field.
     *
     * @return The value of the 'performance' field.
     */
    public sparqles.avro.analytics.EPViewPerformance getPerformance() {
        return performance;
    }

    /**
     * Sets the value of the 'performance' field.
     *
     * @param value the value to set.
     */
    public void setPerformance(sparqles.avro.analytics.EPViewPerformance value) {
        this.performance = value;
    }

    /**
     * Gets the value of the 'interoperability' field.
     *
     * @return The value of the 'interoperability' field.
     */
    public sparqles.avro.analytics.EPViewInteroperability getInteroperability() {
        return interoperability;
    }

    /**
     * Sets the value of the 'interoperability' field.
     *
     * @param value the value to set.
     */
    public void setInteroperability(sparqles.avro.analytics.EPViewInteroperability value) {
        this.interoperability = value;
    }

    /**
     * Gets the value of the 'discoverability' field.
     *
     * @return The value of the 'discoverability' field.
     */
    public sparqles.avro.analytics.EPViewDiscoverability getDiscoverability() {
        return discoverability;
    }

    /**
     * Sets the value of the 'discoverability' field.
     *
     * @param value the value to set.
     */
    public void setDiscoverability(sparqles.avro.analytics.EPViewDiscoverability value) {
        this.discoverability = value;
    }

    /**
     * Gets the value of the 'calculation' field.
     *
     * @return The value of the 'calculation' field.
     */
    public sparqles.avro.analytics.EPViewCalculation getCalculation() {
        return calculation;
    }

    /**
     * Sets the value of the 'calculation' field.
     *
     * @param value the value to set.
     */
    public void setCalculation(sparqles.avro.analytics.EPViewCalculation value) {
        this.calculation = value;
    }

    /**
     * Creates a new EPView RecordBuilder.
     *
     * @return A new EPView RecordBuilder
     */
    public static sparqles.avro.analytics.EPView.Builder newBuilder() {
        return new sparqles.avro.analytics.EPView.Builder();
    }

    /**
     * Creates a new EPView RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new EPView RecordBuilder
     */
    public static sparqles.avro.analytics.EPView.Builder newBuilder(
            sparqles.avro.analytics.EPView.Builder other) {
        if (other == null) {
            return new sparqles.avro.analytics.EPView.Builder();
        } else {
            return new sparqles.avro.analytics.EPView.Builder(other);
        }
    }

    /**
     * Creates a new EPView RecordBuilder by copying an existing EPView instance.
     *
     * @param other The existing instance to copy.
     * @return A new EPView RecordBuilder
     */
    public static sparqles.avro.analytics.EPView.Builder newBuilder(
            sparqles.avro.analytics.EPView other) {
        if (other == null) {
            return new sparqles.avro.analytics.EPView.Builder();
        } else {
            return new sparqles.avro.analytics.EPView.Builder(other);
        }
    }

    /** RecordBuilder for EPView instances. */
    @org.apache.avro.specific.AvroGenerated
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EPView>
            implements org.apache.avro.data.RecordBuilder<EPView> {

        private sparqles.avro.Endpoint endpoint;
        private sparqles.avro.Endpoint.Builder endpointBuilder;
        private sparqles.avro.analytics.EPViewAvailability availability;
        private sparqles.avro.analytics.EPViewAvailability.Builder availabilityBuilder;
        private sparqles.avro.analytics.EPViewPerformance performance;
        private sparqles.avro.analytics.EPViewPerformance.Builder performanceBuilder;
        private sparqles.avro.analytics.EPViewInteroperability interoperability;
        private sparqles.avro.analytics.EPViewInteroperability.Builder interoperabilityBuilder;
        private sparqles.avro.analytics.EPViewDiscoverability discoverability;
        private sparqles.avro.analytics.EPViewDiscoverability.Builder discoverabilityBuilder;
        private sparqles.avro.analytics.EPViewCalculation calculation;
        private sparqles.avro.analytics.EPViewCalculation.Builder calculationBuilder;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(sparqles.avro.analytics.EPView.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.endpoint)) {
                this.endpoint = data().deepCopy(fields()[0].schema(), other.endpoint);
                fieldSetFlags()[0] = other.fieldSetFlags()[0];
            }
            if (other.hasEndpointBuilder()) {
                this.endpointBuilder =
                        sparqles.avro.Endpoint.newBuilder(other.getEndpointBuilder());
            }
            if (isValidValue(fields()[1], other.availability)) {
                this.availability = data().deepCopy(fields()[1].schema(), other.availability);
                fieldSetFlags()[1] = other.fieldSetFlags()[1];
            }
            if (other.hasAvailabilityBuilder()) {
                this.availabilityBuilder =
                        sparqles.avro.analytics.EPViewAvailability.newBuilder(
                                other.getAvailabilityBuilder());
            }
            if (isValidValue(fields()[2], other.performance)) {
                this.performance = data().deepCopy(fields()[2].schema(), other.performance);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (other.hasPerformanceBuilder()) {
                this.performanceBuilder =
                        sparqles.avro.analytics.EPViewPerformance.newBuilder(
                                other.getPerformanceBuilder());
            }
            if (isValidValue(fields()[3], other.interoperability)) {
                this.interoperability =
                        data().deepCopy(fields()[3].schema(), other.interoperability);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
            if (other.hasInteroperabilityBuilder()) {
                this.interoperabilityBuilder =
                        sparqles.avro.analytics.EPViewInteroperability.newBuilder(
                                other.getInteroperabilityBuilder());
            }
            if (isValidValue(fields()[4], other.discoverability)) {
                this.discoverability = data().deepCopy(fields()[4].schema(), other.discoverability);
                fieldSetFlags()[4] = other.fieldSetFlags()[4];
            }
            if (other.hasDiscoverabilityBuilder()) {
                this.discoverabilityBuilder =
                        sparqles.avro.analytics.EPViewDiscoverability.newBuilder(
                                other.getDiscoverabilityBuilder());
            }
            if (isValidValue(fields()[5], other.calculation)) {
                this.calculation = data().deepCopy(fields()[5].schema(), other.calculation);
                fieldSetFlags()[5] = other.fieldSetFlags()[5];
            }
            if (other.hasCalculationBuilder()) {
                this.calculationBuilder =
                        sparqles.avro.analytics.EPViewCalculation.newBuilder(
                                other.getCalculationBuilder());
            }
        }

        /**
         * Creates a Builder by copying an existing EPView instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(sparqles.avro.analytics.EPView other) {
            super(SCHEMA$, MODEL$);
            if (isValidValue(fields()[0], other.endpoint)) {
                this.endpoint = data().deepCopy(fields()[0].schema(), other.endpoint);
                fieldSetFlags()[0] = true;
            }
            this.endpointBuilder = null;
            if (isValidValue(fields()[1], other.availability)) {
                this.availability = data().deepCopy(fields()[1].schema(), other.availability);
                fieldSetFlags()[1] = true;
            }
            this.availabilityBuilder = null;
            if (isValidValue(fields()[2], other.performance)) {
                this.performance = data().deepCopy(fields()[2].schema(), other.performance);
                fieldSetFlags()[2] = true;
            }
            this.performanceBuilder = null;
            if (isValidValue(fields()[3], other.interoperability)) {
                this.interoperability =
                        data().deepCopy(fields()[3].schema(), other.interoperability);
                fieldSetFlags()[3] = true;
            }
            this.interoperabilityBuilder = null;
            if (isValidValue(fields()[4], other.discoverability)) {
                this.discoverability = data().deepCopy(fields()[4].schema(), other.discoverability);
                fieldSetFlags()[4] = true;
            }
            this.discoverabilityBuilder = null;
            if (isValidValue(fields()[5], other.calculation)) {
                this.calculation = data().deepCopy(fields()[5].schema(), other.calculation);
                fieldSetFlags()[5] = true;
            }
            this.calculationBuilder = null;
        }

        /**
         * Gets the value of the 'endpoint' field.
         *
         * @return The value.
         */
        public sparqles.avro.Endpoint getEndpoint() {
            return endpoint;
        }

        /**
         * Sets the value of the 'endpoint' field.
         *
         * @param value The value of 'endpoint'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder setEndpoint(sparqles.avro.Endpoint value) {
            validate(fields()[0], value);
            this.endpointBuilder = null;
            this.endpoint = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'endpoint' field has been set.
         *
         * @return True if the 'endpoint' field has been set, false otherwise.
         */
        public boolean hasEndpoint() {
            return fieldSetFlags()[0];
        }

        /**
         * Gets the Builder instance for the 'endpoint' field and creates one if it doesn't exist
         * yet.
         *
         * @return This builder.
         */
        public sparqles.avro.Endpoint.Builder getEndpointBuilder() {
            if (endpointBuilder == null) {
                if (hasEndpoint()) {
                    setEndpointBuilder(sparqles.avro.Endpoint.newBuilder(endpoint));
                } else {
                    setEndpointBuilder(sparqles.avro.Endpoint.newBuilder());
                }
            }
            return endpointBuilder;
        }

        /**
         * Sets the Builder instance for the 'endpoint' field
         *
         * @param value The builder instance that must be set.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder setEndpointBuilder(
                sparqles.avro.Endpoint.Builder value) {
            clearEndpoint();
            endpointBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'endpoint' field has an active Builder instance
         *
         * @return True if the 'endpoint' field has an active Builder instance
         */
        public boolean hasEndpointBuilder() {
            return endpointBuilder != null;
        }

        /**
         * Clears the value of the 'endpoint' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder clearEndpoint() {
            endpoint = null;
            endpointBuilder = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'availability' field.
         *
         * @return The value.
         */
        public sparqles.avro.analytics.EPViewAvailability getAvailability() {
            return availability;
        }

        /**
         * Sets the value of the 'availability' field.
         *
         * @param value The value of 'availability'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder setAvailability(
                sparqles.avro.analytics.EPViewAvailability value) {
            validate(fields()[1], value);
            this.availabilityBuilder = null;
            this.availability = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'availability' field has been set.
         *
         * @return True if the 'availability' field has been set, false otherwise.
         */
        public boolean hasAvailability() {
            return fieldSetFlags()[1];
        }

        /**
         * Gets the Builder instance for the 'availability' field and creates one if it doesn't
         * exist yet.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewAvailability.Builder getAvailabilityBuilder() {
            if (availabilityBuilder == null) {
                if (hasAvailability()) {
                    setAvailabilityBuilder(
                            sparqles.avro.analytics.EPViewAvailability.newBuilder(availability));
                } else {
                    setAvailabilityBuilder(sparqles.avro.analytics.EPViewAvailability.newBuilder());
                }
            }
            return availabilityBuilder;
        }

        /**
         * Sets the Builder instance for the 'availability' field
         *
         * @param value The builder instance that must be set.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder setAvailabilityBuilder(
                sparqles.avro.analytics.EPViewAvailability.Builder value) {
            clearAvailability();
            availabilityBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'availability' field has an active Builder instance
         *
         * @return True if the 'availability' field has an active Builder instance
         */
        public boolean hasAvailabilityBuilder() {
            return availabilityBuilder != null;
        }

        /**
         * Clears the value of the 'availability' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder clearAvailability() {
            availability = null;
            availabilityBuilder = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'performance' field.
         *
         * @return The value.
         */
        public sparqles.avro.analytics.EPViewPerformance getPerformance() {
            return performance;
        }

        /**
         * Sets the value of the 'performance' field.
         *
         * @param value The value of 'performance'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder setPerformance(
                sparqles.avro.analytics.EPViewPerformance value) {
            validate(fields()[2], value);
            this.performanceBuilder = null;
            this.performance = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'performance' field has been set.
         *
         * @return True if the 'performance' field has been set, false otherwise.
         */
        public boolean hasPerformance() {
            return fieldSetFlags()[2];
        }

        /**
         * Gets the Builder instance for the 'performance' field and creates one if it doesn't exist
         * yet.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewPerformance.Builder getPerformanceBuilder() {
            if (performanceBuilder == null) {
                if (hasPerformance()) {
                    setPerformanceBuilder(
                            sparqles.avro.analytics.EPViewPerformance.newBuilder(performance));
                } else {
                    setPerformanceBuilder(sparqles.avro.analytics.EPViewPerformance.newBuilder());
                }
            }
            return performanceBuilder;
        }

        /**
         * Sets the Builder instance for the 'performance' field
         *
         * @param value The builder instance that must be set.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder setPerformanceBuilder(
                sparqles.avro.analytics.EPViewPerformance.Builder value) {
            clearPerformance();
            performanceBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'performance' field has an active Builder instance
         *
         * @return True if the 'performance' field has an active Builder instance
         */
        public boolean hasPerformanceBuilder() {
            return performanceBuilder != null;
        }

        /**
         * Clears the value of the 'performance' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder clearPerformance() {
            performance = null;
            performanceBuilder = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'interoperability' field.
         *
         * @return The value.
         */
        public sparqles.avro.analytics.EPViewInteroperability getInteroperability() {
            return interoperability;
        }

        /**
         * Sets the value of the 'interoperability' field.
         *
         * @param value The value of 'interoperability'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder setInteroperability(
                sparqles.avro.analytics.EPViewInteroperability value) {
            validate(fields()[3], value);
            this.interoperabilityBuilder = null;
            this.interoperability = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'interoperability' field has been set.
         *
         * @return True if the 'interoperability' field has been set, false otherwise.
         */
        public boolean hasInteroperability() {
            return fieldSetFlags()[3];
        }

        /**
         * Gets the Builder instance for the 'interoperability' field and creates one if it doesn't
         * exist yet.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewInteroperability.Builder getInteroperabilityBuilder() {
            if (interoperabilityBuilder == null) {
                if (hasInteroperability()) {
                    setInteroperabilityBuilder(
                            sparqles.avro.analytics.EPViewInteroperability.newBuilder(
                                    interoperability));
                } else {
                    setInteroperabilityBuilder(
                            sparqles.avro.analytics.EPViewInteroperability.newBuilder());
                }
            }
            return interoperabilityBuilder;
        }

        /**
         * Sets the Builder instance for the 'interoperability' field
         *
         * @param value The builder instance that must be set.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder setInteroperabilityBuilder(
                sparqles.avro.analytics.EPViewInteroperability.Builder value) {
            clearInteroperability();
            interoperabilityBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'interoperability' field has an active Builder instance
         *
         * @return True if the 'interoperability' field has an active Builder instance
         */
        public boolean hasInteroperabilityBuilder() {
            return interoperabilityBuilder != null;
        }

        /**
         * Clears the value of the 'interoperability' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder clearInteroperability() {
            interoperability = null;
            interoperabilityBuilder = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'discoverability' field.
         *
         * @return The value.
         */
        public sparqles.avro.analytics.EPViewDiscoverability getDiscoverability() {
            return discoverability;
        }

        /**
         * Sets the value of the 'discoverability' field.
         *
         * @param value The value of 'discoverability'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder setDiscoverability(
                sparqles.avro.analytics.EPViewDiscoverability value) {
            validate(fields()[4], value);
            this.discoverabilityBuilder = null;
            this.discoverability = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'discoverability' field has been set.
         *
         * @return True if the 'discoverability' field has been set, false otherwise.
         */
        public boolean hasDiscoverability() {
            return fieldSetFlags()[4];
        }

        /**
         * Gets the Builder instance for the 'discoverability' field and creates one if it doesn't
         * exist yet.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewDiscoverability.Builder getDiscoverabilityBuilder() {
            if (discoverabilityBuilder == null) {
                if (hasDiscoverability()) {
                    setDiscoverabilityBuilder(
                            sparqles.avro.analytics.EPViewDiscoverability.newBuilder(
                                    discoverability));
                } else {
                    setDiscoverabilityBuilder(
                            sparqles.avro.analytics.EPViewDiscoverability.newBuilder());
                }
            }
            return discoverabilityBuilder;
        }

        /**
         * Sets the Builder instance for the 'discoverability' field
         *
         * @param value The builder instance that must be set.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder setDiscoverabilityBuilder(
                sparqles.avro.analytics.EPViewDiscoverability.Builder value) {
            clearDiscoverability();
            discoverabilityBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'discoverability' field has an active Builder instance
         *
         * @return True if the 'discoverability' field has an active Builder instance
         */
        public boolean hasDiscoverabilityBuilder() {
            return discoverabilityBuilder != null;
        }

        /**
         * Clears the value of the 'discoverability' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder clearDiscoverability() {
            discoverability = null;
            discoverabilityBuilder = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'calculation' field.
         *
         * @return The value.
         */
        public sparqles.avro.analytics.EPViewCalculation getCalculation() {
            return calculation;
        }

        /**
         * Sets the value of the 'calculation' field.
         *
         * @param value The value of 'calculation'.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder setCalculation(
                sparqles.avro.analytics.EPViewCalculation value) {
            validate(fields()[5], value);
            this.calculationBuilder = null;
            this.calculation = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'calculation' field has been set.
         *
         * @return True if the 'calculation' field has been set, false otherwise.
         */
        public boolean hasCalculation() {
            return fieldSetFlags()[5];
        }

        /**
         * Gets the Builder instance for the 'calculation' field and creates one if it doesn't exist
         * yet.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPViewCalculation.Builder getCalculationBuilder() {
            if (calculationBuilder == null) {
                if (hasCalculation()) {
                    setCalculationBuilder(
                            sparqles.avro.analytics.EPViewCalculation.newBuilder(calculation));
                } else {
                    setCalculationBuilder(sparqles.avro.analytics.EPViewCalculation.newBuilder());
                }
            }
            return calculationBuilder;
        }

        /**
         * Sets the Builder instance for the 'calculation' field
         *
         * @param value The builder instance that must be set.
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder setCalculationBuilder(
                sparqles.avro.analytics.EPViewCalculation.Builder value) {
            clearCalculation();
            calculationBuilder = value;
            return this;
        }

        /**
         * Checks whether the 'calculation' field has an active Builder instance
         *
         * @return True if the 'calculation' field has an active Builder instance
         */
        public boolean hasCalculationBuilder() {
            return calculationBuilder != null;
        }

        /**
         * Clears the value of the 'calculation' field.
         *
         * @return This builder.
         */
        public sparqles.avro.analytics.EPView.Builder clearCalculation() {
            calculation = null;
            calculationBuilder = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public EPView build() {
            try {
                EPView record = new EPView();
                if (endpointBuilder != null) {
                    try {
                        record.endpoint = this.endpointBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("endpoint"));
                        throw e;
                    }
                } else {
                    record.endpoint =
                            fieldSetFlags()[0]
                                    ? this.endpoint
                                    : (sparqles.avro.Endpoint) defaultValue(fields()[0]);
                }
                if (availabilityBuilder != null) {
                    try {
                        record.availability = this.availabilityBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("availability"));
                        throw e;
                    }
                } else {
                    record.availability =
                            fieldSetFlags()[1]
                                    ? this.availability
                                    : (sparqles.avro.analytics.EPViewAvailability)
                                            defaultValue(fields()[1]);
                }
                if (performanceBuilder != null) {
                    try {
                        record.performance = this.performanceBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("performance"));
                        throw e;
                    }
                } else {
                    record.performance =
                            fieldSetFlags()[2]
                                    ? this.performance
                                    : (sparqles.avro.analytics.EPViewPerformance)
                                            defaultValue(fields()[2]);
                }
                if (interoperabilityBuilder != null) {
                    try {
                        record.interoperability = this.interoperabilityBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("interoperability"));
                        throw e;
                    }
                } else {
                    record.interoperability =
                            fieldSetFlags()[3]
                                    ? this.interoperability
                                    : (sparqles.avro.analytics.EPViewInteroperability)
                                            defaultValue(fields()[3]);
                }
                if (discoverabilityBuilder != null) {
                    try {
                        record.discoverability = this.discoverabilityBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("discoverability"));
                        throw e;
                    }
                } else {
                    record.discoverability =
                            fieldSetFlags()[4]
                                    ? this.discoverability
                                    : (sparqles.avro.analytics.EPViewDiscoverability)
                                            defaultValue(fields()[4]);
                }
                if (calculationBuilder != null) {
                    try {
                        record.calculation = this.calculationBuilder.build();
                    } catch (org.apache.avro.AvroMissingFieldException e) {
                        e.addParentField(record.getSchema().getField("calculation"));
                        throw e;
                    }
                } else {
                    record.calculation =
                            fieldSetFlags()[5]
                                    ? this.calculation
                                    : (sparqles.avro.analytics.EPViewCalculation)
                                            defaultValue(fields()[5]);
                }
                return record;
            } catch (org.apache.avro.AvroMissingFieldException e) {
                throw e;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<EPView> WRITER$ =
            (org.apache.avro.io.DatumWriter<EPView>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<EPView> READER$ =
            (org.apache.avro.io.DatumReader<EPView>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
        this.endpoint.customEncode(out);

        this.availability.customEncode(out);

        this.performance.customEncode(out);

        this.interoperability.customEncode(out);

        this.discoverability.customEncode(out);

        if (this.calculation == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            this.calculation.customEncode(out);
        }
    }

    @Override
    public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
        org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            if (this.endpoint == null) {
                this.endpoint = new sparqles.avro.Endpoint();
            }
            this.endpoint.customDecode(in);

            if (this.availability == null) {
                this.availability = new sparqles.avro.analytics.EPViewAvailability();
            }
            this.availability.customDecode(in);

            if (this.performance == null) {
                this.performance = new sparqles.avro.analytics.EPViewPerformance();
            }
            this.performance.customDecode(in);

            if (this.interoperability == null) {
                this.interoperability = new sparqles.avro.analytics.EPViewInteroperability();
            }
            this.interoperability.customDecode(in);

            if (this.discoverability == null) {
                this.discoverability = new sparqles.avro.analytics.EPViewDiscoverability();
            }
            this.discoverability.customDecode(in);

            if (in.readIndex() != 1) {
                in.readNull();
                this.calculation = null;
            } else {
                if (this.calculation == null) {
                    this.calculation = new sparqles.avro.analytics.EPViewCalculation();
                }
                this.calculation.customDecode(in);
            }

        } else {
            for (int i = 0; i < 6; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        if (this.endpoint == null) {
                            this.endpoint = new sparqles.avro.Endpoint();
                        }
                        this.endpoint.customDecode(in);
                        break;

                    case 1:
                        if (this.availability == null) {
                            this.availability = new sparqles.avro.analytics.EPViewAvailability();
                        }
                        this.availability.customDecode(in);
                        break;

                    case 2:
                        if (this.performance == null) {
                            this.performance = new sparqles.avro.analytics.EPViewPerformance();
                        }
                        this.performance.customDecode(in);
                        break;

                    case 3:
                        if (this.interoperability == null) {
                            this.interoperability =
                                    new sparqles.avro.analytics.EPViewInteroperability();
                        }
                        this.interoperability.customDecode(in);
                        break;

                    case 4:
                        if (this.discoverability == null) {
                            this.discoverability =
                                    new sparqles.avro.analytics.EPViewDiscoverability();
                        }
                        this.discoverability.customDecode(in);
                        break;

                    case 5:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.calculation = null;
                        } else {
                            if (this.calculation == null) {
                                this.calculation = new sparqles.avro.analytics.EPViewCalculation();
                            }
                            this.calculation.customDecode(in);
                        }
                        break;

                    default:
                        throw new java.io.IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}
