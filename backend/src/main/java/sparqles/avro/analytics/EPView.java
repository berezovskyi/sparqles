/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package sparqles.avro.analytics;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class EPView extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EPView\",\"namespace\":\"sparqles.avro.analytics\",\"fields\":[{\"name\":\"endpoint\",\"type\":{\"type\":\"record\",\"name\":\"Endpoint\",\"namespace\":\"sparqles.avro\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"datasets\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Dataset\",\"fields\":[{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"label\",\"type\":\"string\"}]}}}]}},{\"name\":\"availability\",\"type\":{\"type\":\"record\",\"name\":\"EPViewAvailability\",\"fields\":[{\"name\":\"upNow\",\"type\":\"boolean\"},{\"name\":\"testRuns\",\"type\":\"int\"},{\"name\":\"uptimeLast24h\",\"type\":\"double\"},{\"name\":\"uptimeLast7d\",\"type\":\"double\"},{\"name\":\"uptimeLast31d\",\"type\":\"double\"},{\"name\":\"uptimeOverall\",\"type\":\"double\"},{\"name\":\"data\",\"type\":{\"type\":\"record\",\"name\":\"EPViewAvailabilityData\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"values\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EPViewAvailabilityDataPoint\",\"fields\":[{\"name\":\"x\",\"type\":\"long\"},{\"name\":\"y\",\"type\":\"double\"}]}}}]}}]}},{\"name\":\"performance\",\"type\":{\"type\":\"record\",\"name\":\"EPViewPerformance\",\"fields\":[{\"name\":\"threshold\",\"type\":\"long\"},{\"name\":\"ask\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EPViewPerformanceData\",\"fields\":[{\"name\":\"key\",\"type\":\"string\"},{\"name\":\"color\",\"type\":\"string\"},{\"name\":\"data\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EPViewPerformanceDataValues\",\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"double\"},{\"name\":\"exception\",\"type\":[\"string\",\"null\"]}]}}}]}}},{\"name\":\"join\",\"type\":{\"type\":\"array\",\"items\":\"EPViewPerformanceData\"}}]}},{\"name\":\"interoperability\",\"type\":{\"type\":\"record\",\"name\":\"EPViewInteroperability\",\"fields\":[{\"name\":\"SPARQL1Features\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EPViewInteroperabilityData\",\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"boolean\"},{\"name\":\"exception\",\"type\":[\"string\",\"null\"]}]}}},{\"name\":\"SPARQL11Features\",\"type\":{\"type\":\"array\",\"items\":\"EPViewInteroperabilityData\"}}]}},{\"name\":\"discoverability\",\"type\":{\"type\":\"record\",\"name\":\"EPViewDiscoverability\",\"fields\":[{\"name\":\"serverName\",\"type\":\"string\"},{\"name\":\"VoIDDescription\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"EPViewDiscoverabilityData\",\"fields\":[{\"name\":\"label\",\"type\":\"string\"},{\"name\":\"value\",\"type\":\"boolean\"}]}}},{\"name\":\"SDDescription\",\"type\":{\"type\":\"array\",\"items\":\"EPViewDiscoverabilityData\"}}]}}]}");
    @Deprecated public sparqles.avro.Endpoint endpoint;
    @Deprecated public sparqles.avro.analytics.EPViewAvailability availability;
    @Deprecated public sparqles.avro.analytics.EPViewPerformance performance;
    @Deprecated public sparqles.avro.analytics.EPViewInteroperability interoperability;
    @Deprecated public sparqles.avro.analytics.EPViewDiscoverability discoverability;
    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use {@link \#newBuilder()}. 
     */
    public EPView() {
    }
    
    /**
     * All-args constructor.
     */
    public EPView(sparqles.avro.Endpoint endpoint, sparqles.avro.analytics.EPViewAvailability availability, sparqles.avro.analytics.EPViewPerformance performance, sparqles.avro.analytics.EPViewInteroperability interoperability, sparqles.avro.analytics.EPViewDiscoverability discoverability) {
        this.endpoint = endpoint;
        this.availability = availability;
        this.performance = performance;
        this.interoperability = interoperability;
        this.discoverability = discoverability;
    }
    
    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }
    
    /** Creates a new EPView RecordBuilder */
    public static sparqles.avro.analytics.EPView.Builder newBuilder() {
        return new sparqles.avro.analytics.EPView.Builder();
    }
    
    /** Creates a new EPView RecordBuilder by copying an existing Builder */
    public static sparqles.avro.analytics.EPView.Builder newBuilder(sparqles.avro.analytics.EPView.Builder other) {
        return new sparqles.avro.analytics.EPView.Builder(other);
    }
    
    /** Creates a new EPView RecordBuilder by copying an existing EPView instance */
    public static sparqles.avro.analytics.EPView.Builder newBuilder(sparqles.avro.analytics.EPView other) {
        return new sparqles.avro.analytics.EPView.Builder(other);
    }
    
    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }
    
    // Used by DatumWriter.  Applications should not call. 
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return endpoint;
            case 1:
                return availability;
            case 2:
                return performance;
            case 3:
                return interoperability;
            case 4:
                return discoverability;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }
    
    // Used by DatumReader.  Applications should not call. 
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                endpoint = (sparqles.avro.Endpoint) value$;
                break;
            case 1:
                availability = (sparqles.avro.analytics.EPViewAvailability) value$;
                break;
            case 2:
                performance = (sparqles.avro.analytics.EPViewPerformance) value$;
                break;
            case 3:
                interoperability = (sparqles.avro.analytics.EPViewInteroperability) value$;
                break;
            case 4:
                discoverability = (sparqles.avro.analytics.EPViewDiscoverability) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }
    
    /**
     * Gets the value of the 'endpoint' field.
     */
    public sparqles.avro.Endpoint getEndpoint() {
        return endpoint;
    }
    
    /**
     * Sets the value of the 'endpoint' field.
     * @param value the value to set.
     */
    public void setEndpoint(sparqles.avro.Endpoint value) {
        this.endpoint = value;
    }
    
    /**
     * Gets the value of the 'availability' field.
     */
    public sparqles.avro.analytics.EPViewAvailability getAvailability() {
        return availability;
    }
    
    /**
     * Sets the value of the 'availability' field.
     * @param value the value to set.
     */
    public void setAvailability(sparqles.avro.analytics.EPViewAvailability value) {
        this.availability = value;
    }
    
    /**
     * Gets the value of the 'performance' field.
     */
    public sparqles.avro.analytics.EPViewPerformance getPerformance() {
        return performance;
    }
    
    /**
     * Sets the value of the 'performance' field.
     * @param value the value to set.
     */
    public void setPerformance(sparqles.avro.analytics.EPViewPerformance value) {
        this.performance = value;
    }
    
    /**
     * Gets the value of the 'interoperability' field.
     */
    public sparqles.avro.analytics.EPViewInteroperability getInteroperability() {
        return interoperability;
    }
    
    /**
     * Sets the value of the 'interoperability' field.
     * @param value the value to set.
     */
    public void setInteroperability(sparqles.avro.analytics.EPViewInteroperability value) {
        this.interoperability = value;
    }
    
    /**
     * Gets the value of the 'discoverability' field.
     */
    public sparqles.avro.analytics.EPViewDiscoverability getDiscoverability() {
        return discoverability;
    }
    
    /**
     * Sets the value of the 'discoverability' field.
     * @param value the value to set.
     */
    public void setDiscoverability(sparqles.avro.analytics.EPViewDiscoverability value) {
        this.discoverability = value;
    }
    
    /**
     * RecordBuilder for EPView instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EPView>
        implements org.apache.avro.data.RecordBuilder<EPView> {
        
        private sparqles.avro.Endpoint endpoint;
        private sparqles.avro.analytics.EPViewAvailability availability;
        private sparqles.avro.analytics.EPViewPerformance performance;
        private sparqles.avro.analytics.EPViewInteroperability interoperability;
        private sparqles.avro.analytics.EPViewDiscoverability discoverability;
        
        /** Creates a new Builder */
        private Builder() {
            super(sparqles.avro.analytics.EPView.SCHEMA$);
        }
        
        /** Creates a Builder by copying an existing Builder */
        private Builder(sparqles.avro.analytics.EPView.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.endpoint)) {
                this.endpoint = data().deepCopy(fields()[0].schema(), other.endpoint);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.availability)) {
                this.availability = data().deepCopy(fields()[1].schema(), other.availability);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.performance)) {
                this.performance = data().deepCopy(fields()[2].schema(), other.performance);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.interoperability)) {
                this.interoperability = data().deepCopy(fields()[3].schema(), other.interoperability);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.discoverability)) {
                this.discoverability = data().deepCopy(fields()[4].schema(), other.discoverability);
                fieldSetFlags()[4] = true;
            }
        }
        
        /** Creates a Builder by copying an existing EPView instance */
        private Builder(sparqles.avro.analytics.EPView other) {
            super(sparqles.avro.analytics.EPView.SCHEMA$);
            if (isValidValue(fields()[0], other.endpoint)) {
                this.endpoint = data().deepCopy(fields()[0].schema(), other.endpoint);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.availability)) {
                this.availability = data().deepCopy(fields()[1].schema(), other.availability);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.performance)) {
                this.performance = data().deepCopy(fields()[2].schema(), other.performance);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.interoperability)) {
                this.interoperability = data().deepCopy(fields()[3].schema(), other.interoperability);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.discoverability)) {
                this.discoverability = data().deepCopy(fields()[4].schema(), other.discoverability);
                fieldSetFlags()[4] = true;
            }
        }
        
        /** Gets the value of the 'endpoint' field */
        public sparqles.avro.Endpoint getEndpoint() {
            return endpoint;
        }
        
        /** Sets the value of the 'endpoint' field */
        public sparqles.avro.analytics.EPView.Builder setEndpoint(sparqles.avro.Endpoint value) {
            validate(fields()[0], value);
            this.endpoint = value;
            fieldSetFlags()[0] = true;
            return this;
        }
        
        /** Checks whether the 'endpoint' field has been set */
        public boolean hasEndpoint() {
            return fieldSetFlags()[0];
        }
        
        /** Clears the value of the 'endpoint' field */
        public sparqles.avro.analytics.EPView.Builder clearEndpoint() {
            endpoint = null;
            fieldSetFlags()[0] = false;
            return this;
        }
        
        /** Gets the value of the 'availability' field */
        public sparqles.avro.analytics.EPViewAvailability getAvailability() {
            return availability;
        }
        
        /** Sets the value of the 'availability' field */
        public sparqles.avro.analytics.EPView.Builder setAvailability(sparqles.avro.analytics.EPViewAvailability value) {
            validate(fields()[1], value);
            this.availability = value;
            fieldSetFlags()[1] = true;
            return this;
        }
        
        /** Checks whether the 'availability' field has been set */
        public boolean hasAvailability() {
            return fieldSetFlags()[1];
        }
        
        /** Clears the value of the 'availability' field */
        public sparqles.avro.analytics.EPView.Builder clearAvailability() {
            availability = null;
            fieldSetFlags()[1] = false;
            return this;
        }
        
        /** Gets the value of the 'performance' field */
        public sparqles.avro.analytics.EPViewPerformance getPerformance() {
            return performance;
        }
        
        /** Sets the value of the 'performance' field */
        public sparqles.avro.analytics.EPView.Builder setPerformance(sparqles.avro.analytics.EPViewPerformance value) {
            validate(fields()[2], value);
            this.performance = value;
            fieldSetFlags()[2] = true;
            return this;
        }
        
        /** Checks whether the 'performance' field has been set */
        public boolean hasPerformance() {
            return fieldSetFlags()[2];
        }
        
        /** Clears the value of the 'performance' field */
        public sparqles.avro.analytics.EPView.Builder clearPerformance() {
            performance = null;
            fieldSetFlags()[2] = false;
            return this;
        }
        
        /** Gets the value of the 'interoperability' field */
        public sparqles.avro.analytics.EPViewInteroperability getInteroperability() {
            return interoperability;
        }
        
        /** Sets the value of the 'interoperability' field */
        public sparqles.avro.analytics.EPView.Builder setInteroperability(sparqles.avro.analytics.EPViewInteroperability value) {
            validate(fields()[3], value);
            this.interoperability = value;
            fieldSetFlags()[3] = true;
            return this;
        }
        
        /** Checks whether the 'interoperability' field has been set */
        public boolean hasInteroperability() {
            return fieldSetFlags()[3];
        }
        
        /** Clears the value of the 'interoperability' field */
        public sparqles.avro.analytics.EPView.Builder clearInteroperability() {
            interoperability = null;
            fieldSetFlags()[3] = false;
            return this;
        }
        
        /** Gets the value of the 'discoverability' field */
        public sparqles.avro.analytics.EPViewDiscoverability getDiscoverability() {
            return discoverability;
        }
        
        /** Sets the value of the 'discoverability' field */
        public sparqles.avro.analytics.EPView.Builder setDiscoverability(sparqles.avro.analytics.EPViewDiscoverability value) {
            validate(fields()[4], value);
            this.discoverability = value;
            fieldSetFlags()[4] = true;
            return this;
        }
        
        /** Checks whether the 'discoverability' field has been set */
        public boolean hasDiscoverability() {
            return fieldSetFlags()[4];
        }
        
        /** Clears the value of the 'discoverability' field */
        public sparqles.avro.analytics.EPView.Builder clearDiscoverability() {
            discoverability = null;
            fieldSetFlags()[4] = false;
            return this;
        }
        
        @Override
        public EPView build() {
            try {
                EPView record = new EPView();
                record.endpoint = fieldSetFlags()[0] ? this.endpoint : (sparqles.avro.Endpoint) defaultValue(fields()[0]);
                record.availability = fieldSetFlags()[1] ? this.availability : (sparqles.avro.analytics.EPViewAvailability) defaultValue(fields()[1]);
                record.performance = fieldSetFlags()[2] ? this.performance : (sparqles.avro.analytics.EPViewPerformance) defaultValue(fields()[2]);
                record.interoperability = fieldSetFlags()[3] ? this.interoperability : (sparqles.avro.analytics.EPViewInteroperability) defaultValue(fields()[3]);
                record.discoverability = fieldSetFlags()[4] ? this.discoverability : (sparqles.avro.analytics.EPViewDiscoverability) defaultValue(fields()[4]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
