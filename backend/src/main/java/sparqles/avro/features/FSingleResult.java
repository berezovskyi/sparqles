/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package sparqles.avro.features;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class FSingleResult extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1065450960484486367L;

  public static final org.apache.avro.Schema SCHEMA$ =
      new org.apache.avro.Schema.Parser()
          .parse(
              "{\"type\":\"record\",\"name\":\"FSingleResult\",\"namespace\":\"sparqles.avro.features\",\"fields\":[{\"name\":\"query\",\"type\":\"string\"},{\"name\":\"run\",\"type\":{\"type\":\"record\",\"name\":\"Run\",\"namespace\":\"sparqles.avro.performance\",\"fields\":[{\"name\":\"frestout\",\"type\":\"long\"},{\"name\":\"solutions\",\"type\":\"int\"},{\"name\":\"inittime\",\"type\":\"long\"},{\"name\":\"exectime\",\"type\":\"long\"},{\"name\":\"closetime\",\"type\":\"long\"},{\"name\":\"Exception\",\"type\":[\"string\",\"null\"]},{\"name\":\"exectout\",\"type\":\"long\"}]}}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FSingleResult> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FSingleResult> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   *
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FSingleResult> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   *
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FSingleResult> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link
   * SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FSingleResult> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FSingleResult to a ByteBuffer.
   *
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FSingleResult from a ByteBuffer.
   *
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FSingleResult instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of
   *     this class
   */
  public static FSingleResult fromByteBuffer(java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence query;
  private sparqles.avro.performance.Run run;

  /**
   * Default constructor. Note that this does not initialize fields to their default values from the
   * schema. If that is desired then one should use <code>newBuilder()</code>.
   */
  public FSingleResult() {}

  /**
   * All-args constructor.
   *
   * @param query The new value for query
   * @param run The new value for run
   */
  public FSingleResult(java.lang.CharSequence query, sparqles.avro.performance.Run run) {
    this.query = query;
    this.run = run;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() {
    return MODEL$;
  }

  @Override
  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
      case 0:
        return query;
      case 1:
        return run;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
      case 0:
        query = (java.lang.CharSequence) value$;
        break;
      case 1:
        run = (sparqles.avro.performance.Run) value$;
        break;
      default:
        throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'query' field.
   *
   * @return The value of the 'query' field.
   */
  public java.lang.CharSequence getQuery() {
    return query;
  }

  /**
   * Sets the value of the 'query' field.
   *
   * @param value the value to set.
   */
  public void setQuery(java.lang.CharSequence value) {
    this.query = value;
  }

  /**
   * Gets the value of the 'run' field.
   *
   * @return The value of the 'run' field.
   */
  public sparqles.avro.performance.Run getRun() {
    return run;
  }

  /**
   * Sets the value of the 'run' field.
   *
   * @param value the value to set.
   */
  public void setRun(sparqles.avro.performance.Run value) {
    this.run = value;
  }

  /**
   * Creates a new FSingleResult RecordBuilder.
   *
   * @return A new FSingleResult RecordBuilder
   */
  public static sparqles.avro.features.FSingleResult.Builder newBuilder() {
    return new sparqles.avro.features.FSingleResult.Builder();
  }

  /**
   * Creates a new FSingleResult RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new FSingleResult RecordBuilder
   */
  public static sparqles.avro.features.FSingleResult.Builder newBuilder(
      sparqles.avro.features.FSingleResult.Builder other) {
    if (other == null) {
      return new sparqles.avro.features.FSingleResult.Builder();
    } else {
      return new sparqles.avro.features.FSingleResult.Builder(other);
    }
  }

  /**
   * Creates a new FSingleResult RecordBuilder by copying an existing FSingleResult instance.
   *
   * @param other The existing instance to copy.
   * @return A new FSingleResult RecordBuilder
   */
  public static sparqles.avro.features.FSingleResult.Builder newBuilder(
      sparqles.avro.features.FSingleResult other) {
    if (other == null) {
      return new sparqles.avro.features.FSingleResult.Builder();
    } else {
      return new sparqles.avro.features.FSingleResult.Builder(other);
    }
  }

  /** RecordBuilder for FSingleResult instances. */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder
      extends org.apache.avro.specific.SpecificRecordBuilderBase<FSingleResult>
      implements org.apache.avro.data.RecordBuilder<FSingleResult> {

    private java.lang.CharSequence query;
    private sparqles.avro.performance.Run run;
    private sparqles.avro.performance.Run.Builder runBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(sparqles.avro.features.FSingleResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.query)) {
        this.query = data().deepCopy(fields()[0].schema(), other.query);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.run)) {
        this.run = data().deepCopy(fields()[1].schema(), other.run);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasRunBuilder()) {
        this.runBuilder = sparqles.avro.performance.Run.newBuilder(other.getRunBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing FSingleResult instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(sparqles.avro.features.FSingleResult other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.query)) {
        this.query = data().deepCopy(fields()[0].schema(), other.query);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.run)) {
        this.run = data().deepCopy(fields()[1].schema(), other.run);
        fieldSetFlags()[1] = true;
      }
      this.runBuilder = null;
    }

    /**
     * Gets the value of the 'query' field.
     *
     * @return The value.
     */
    public java.lang.CharSequence getQuery() {
      return query;
    }

    /**
     * Sets the value of the 'query' field.
     *
     * @param value The value of 'query'.
     * @return This builder.
     */
    public sparqles.avro.features.FSingleResult.Builder setQuery(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.query = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'query' field has been set.
     *
     * @return True if the 'query' field has been set, false otherwise.
     */
    public boolean hasQuery() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'query' field.
     *
     * @return This builder.
     */
    public sparqles.avro.features.FSingleResult.Builder clearQuery() {
      query = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'run' field.
     *
     * @return The value.
     */
    public sparqles.avro.performance.Run getRun() {
      return run;
    }

    /**
     * Sets the value of the 'run' field.
     *
     * @param value The value of 'run'.
     * @return This builder.
     */
    public sparqles.avro.features.FSingleResult.Builder setRun(
        sparqles.avro.performance.Run value) {
      validate(fields()[1], value);
      this.runBuilder = null;
      this.run = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'run' field has been set.
     *
     * @return True if the 'run' field has been set, false otherwise.
     */
    public boolean hasRun() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'run' field and creates one if it doesn't exist yet.
     *
     * @return This builder.
     */
    public sparqles.avro.performance.Run.Builder getRunBuilder() {
      if (runBuilder == null) {
        if (hasRun()) {
          setRunBuilder(sparqles.avro.performance.Run.newBuilder(run));
        } else {
          setRunBuilder(sparqles.avro.performance.Run.newBuilder());
        }
      }
      return runBuilder;
    }

    /**
     * Sets the Builder instance for the 'run' field
     *
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public sparqles.avro.features.FSingleResult.Builder setRunBuilder(
        sparqles.avro.performance.Run.Builder value) {
      clearRun();
      runBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'run' field has an active Builder instance
     *
     * @return True if the 'run' field has an active Builder instance
     */
    public boolean hasRunBuilder() {
      return runBuilder != null;
    }

    /**
     * Clears the value of the 'run' field.
     *
     * @return This builder.
     */
    public sparqles.avro.features.FSingleResult.Builder clearRun() {
      run = null;
      runBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FSingleResult build() {
      try {
        FSingleResult record = new FSingleResult();
        record.query =
            fieldSetFlags()[0] ? this.query : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (runBuilder != null) {
          try {
            record.run = this.runBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("run"));
            throw e;
          }
        } else {
          record.run =
              fieldSetFlags()[1]
                  ? this.run
                  : (sparqles.avro.performance.Run) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FSingleResult> WRITER$ =
      (org.apache.avro.io.DatumWriter<FSingleResult>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FSingleResult> READER$ =
      (org.apache.avro.io.DatumReader<FSingleResult>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override
  protected boolean hasCustomCoders() {
    return true;
  }

  @Override
  public void customEncode(org.apache.avro.io.Encoder out) throws java.io.IOException {
    out.writeString(this.query);

    this.run.customEncode(out);
  }

  @Override
  public void customDecode(org.apache.avro.io.ResolvingDecoder in) throws java.io.IOException {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.query = in.readString(this.query instanceof Utf8 ? (Utf8) this.query : null);

      if (this.run == null) {
        this.run = new sparqles.avro.performance.Run();
      }
      this.run.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
          case 0:
            this.query = in.readString(this.query instanceof Utf8 ? (Utf8) this.query : null);
            break;

          case 1:
            if (this.run == null) {
              this.run = new sparqles.avro.performance.Run();
            }
            this.run.customDecode(in);
            break;

          default:
            throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}
